// SEGA Master System MIDI Interface for Arduino MIDI In
// SMSM Firmware v100
// by little-scale 
// Released 3 December 2012




/* Arduino Hardware

SMS Player 2 Port Pin 1 <-- Arduino Pin 2
SMS Player 2 Port Pin 2 <-- Arduino Pin 3
SMS Player 2 Port Pin 3 <-- Arduino Analog Input Pin 0 
SMS Player 2 Port Pin 4 <-- Arduino Analog Input Pin 1
SMS Player 2 Port Pin 5 No Connection
SMS Player 2 Port Pin 6 <-- Arduino Analog Input Pin 2 
SMS Player 2 Port Pin 7 <-- Arduino Pin 4
SMS Player 2 Port Pin 8 <-> Arduino Ground
SMS Player 2 Port Pin 9 <-- Arduino Analog Input Pin 3

*/




// Arduino Software


#include <avr/pgmspace.h>
#include <math.h>

// FM VALUES

byte prev_address;
byte out_data;
byte shadow[56];
byte fm_pitches[9];

byte drum; 
byte drum_key;  
double fm_pitch;
int fm_bend_res = 12;
byte fm_pitch1;
byte fm_pitch2;
byte fm_block;
byte fm_offset;
int note_A = 444; 
byte fm_octave_div = 12;
double fm_bend[9];





// SAMPLES BEGINS HERE
int SPB_flag = 0;
int SPB_sound = 0;
int SPB_counter = 0;
int SPB_speed = 0;
int SPB_tick = 1;
int sample_on = 0; // turn sample mode on
byte SPB_volume; 

int SPB_max = 400;

int sample_length_list[] = {
  900, // kick 1
  600, // snare 1
  400, // hat c1
  900, // hat o1
  1300, // tom1
  4000, // ride1
  400, 
  300,
  1000,
  2000,
  2000,
  1500,
  720,
  1500,
  1500,
  900,
  500,
  1500,
  1000,
  1000
};






prog_uchar kick1[] PROGMEM = {
119, 120, 135, 118, 102, 84, 67, 50, 16, 17, 33, 38, 120, 171, 188, 240, 255, 255, 255, 255, 255, 255, 238, 237, 203, 187, 170, 153, 137, 136, 119, 119, 118, 101, 84, 67, 50, 33, 17, 17, 17, 17, 17, 34, 34, 34, 35, 51, 51, 51, 68, 68, 85, 85, 102, 103, 119, 119, 136, 135, 120, 136, 136, 136, 153, 153, 154, 170, 187, 187, 187, 188, 203, 187, 187, 187, 187, 187, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 153, 153, 136, 136, 135, 119, 119, 102, 102, 102, 102, 102, 85, 85, 85, 85, 85, 85, 85, 85, 86, 102, 102, 101, 85, 85, 85, 86, 102, 102, 103, 119, 119, 136, 136, 136, 137, 153, 153, 153, 153, 153, 153, 153, 153, 153, 154, 170, 170, 170, 170, 153, 153, 153, 152, 136, 136, 136, 135, 119, 119, 119, 119, 120, 136, 136, 136, 135, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 118, 102, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 136, 136, 136, 136, 136, 136, 136, 136, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 135, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 135, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 136, 136, 136, 136, 136, 136, 136, 136, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136
};

prog_uchar snare1[] PROGMEM = {
136, 119, 119, 123, 256, 255, 155, 0, 1, 57, 206, 239, 255, 222, 219, 135, 32, 0, 0, 0, 19, 189, 191, 255, 255, 238, 182, 0, 0, 0, 3, 57, 207, 236, 255, 254, 220, 16, 0, 4, 52, 101, 136, 137, 204, 205, 254, 154, 115, 18, 18, 20, 84, 185, 189, 204, 202, 155, 153, 103, 84, 101, 70, 117, 103, 168, 138, 136, 153, 169, 170, 134, 104, 117, 86, 119, 100, 104, 137, 152, 171, 185, 152, 153, 117, 103, 70, 120, 103, 103, 118, 154, 139, 186, 135, 153, 118, 87, 82, 69, 104, 137, 170, 136, 153, 137, 134, 102, 118, 103, 85, 120, 102, 120, 122, 136, 137, 136, 152, 134, 102, 102, 103, 118, 119, 104, 136, 136, 136, 120, 152, 120, 119, 103, 104, 119, 136, 134, 151, 134, 136, 137, 136, 136, 134, 119, 100, 102, 102, 120, 137, 152, 153, 152, 136, 136, 117, 118, 118, 119, 120, 120, 120, 152, 152, 136, 118, 119, 119, 136, 119, 135, 103, 120, 135, 119, 136, 136, 135, 135, 118, 120, 119, 136, 136, 120, 136, 120, 120, 118, 136, 119, 120, 120, 118, 119, 120, 136, 120, 136, 136, 119, 136, 119, 119, 119, 119, 136, 136, 120, 136, 136, 120, 135, 103, 119, 119, 118, 136, 135, 152, 136, 136, 119, 135, 119, 119, 119, 135, 120, 136, 135, 135, 119, 135, 119, 135, 136, 135, 120, 135, 136, 135, 119, 119, 120, 136, 135, 120, 136, 120, 135, 119, 119, 120, 119, 119, 120, 120, 136, 119, 119, 119, 119, 119, 119, 135, 136, 136, 135, 119, 119, 135, 119, 135, 135, 120, 136, 120, 136, 135, 135, 135, 119, 119, 119, 119, 119, 120, 120, 136, 136, 136, 119, 119, 119, 135, 119, 119, 120
};

prog_uchar hatc1[] PROGMEM = {
136, 136, 133, 112, 58, 34, 104, 75, 119, 25, 114, 72, 103, 54, 184, 150, 86, 102, 135, 149, 73, 185, 101, 134, 69, 104, 118, 136, 134, 185, 119, 104, 151, 104, 197, 214, 121, 119, 134, 134, 121, 152, 118, 118, 135, 169, 119, 135, 120, 136, 105, 136, 152, 151, 104, 104, 134, 120, 137, 103, 103, 103, 118, 120, 120, 136, 137, 120, 120, 104, 135, 119, 151, 136, 151, 136, 119, 119, 120, 120, 136, 136, 120, 136, 119, 136, 136, 135, 136, 120, 120, 135, 135, 135, 135, 120, 135, 120, 136, 135, 135, 120, 135, 136, 135, 135, 119, 136, 136, 120, 120, 135, 119, 119, 120, 120, 136, 120, 119, 135, 119, 119, 135, 135, 119, 135, 136, 119, 119, 135, 119, 135, 135, 120, 119, 135, 120, 120, 119, 136, 119, 119, 120, 119, 135, 135, 120, 119, 119, 119, 119, 135, 119, 119, 119, 119, 120, 119, 119, 119, 135, 136, 119, 119, 119, 119, 119, 119, 119, 119, 119, 135, 119, 119, 135, 120, 119, 135, 120, 135, 119, 119, 119, 119, 136, 135, 119, 136, 120, 119, 136, 120, 135, 135, 120, 119, 135, 136, 119, 119
};

prog_uchar hato1[] PROGMEM = {
120, 136, 136, 117, 111, 169, 85, 90, 119, 199, 167, 166, 55, 74, 53, 123, 105, 92, 73, 182, 80, 166, 107, 135, 86, 140, 135, 103, 119, 171, 118, 138, 165, 106, 152, 89, 136, 117, 237, 120, 119, 136, 153, 101, 134, 204, 187, 116, 135, 137, 214, 102, 70, 118, 153, 136, 102, 116, 153, 119, 87, 133, 137, 118, 91, 104, 155, 149, 105, 139, 152, 86, 104, 120, 169, 166, 26, 121, 138, 101, 134, 184, 120, 182, 139, 108, 104, 119, 101, 118, 136, 105, 120, 138, 119, 133, 168, 104, 153, 103, 86, 170, 135, 135, 119, 120, 120, 119, 119, 103, 117, 136, 105, 120, 87, 135, 135, 137, 151, 118, 105, 136, 119, 119, 134, 120, 185, 152, 135, 136, 138, 136, 136, 151, 135, 136, 151, 152, 136, 105, 87, 118, 152, 103, 147, 165, 119, 118, 152, 121, 168, 136, 135, 120, 118, 87, 105, 25, 120, 152, 119, 151, 150, 154, 70, 86, 120, 120, 102, 134, 103, 119, 121, 119, 120, 119, 135, 135, 119, 120, 136, 135, 152, 120, 169, 170, 152, 134, 136, 121, 119, 151, 135, 152, 120, 135, 121, 87, 135, 167, 136, 134, 136, 103, 122, 134, 136, 135, 120, 153, 152, 120, 120, 120, 119, 119, 183, 137, 136, 121, 135, 152, 151, 103, 135, 120, 135, 120, 135, 119, 119, 135, 119, 136, 136, 119, 119, 120, 135, 136, 120, 118, 120, 150, 152, 119, 120, 153, 121, 119, 119, 120, 135, 167, 87, 135, 136, 136, 86, 104, 135, 152, 120, 120, 136, 152, 119, 136, 135, 120, 121, 118, 104, 137, 135, 119, 120, 118, 119, 119, 136, 151, 120, 135, 152, 135, 120, 120, 120, 136, 135, 135, 136, 136, 135, 118, 136, 120, 136, 119, 120, 135, 121, 135, 119, 119, 136, 120, 119, 135, 103, 120, 120, 119, 135, 120, 135, 119, 119, 120, 119, 134, 135, 135, 119, 119, 119, 120, 104, 119, 135, 136, 119, 136, 151, 104, 120, 120, 136, 136, 119, 119, 120, 136, 136, 135, 119, 135, 119, 135, 136, 119, 119, 135, 120, 120, 136, 135, 135, 119, 136, 119, 135, 119, 136, 119, 119, 119, 119, 119, 119, 135, 119, 135, 134, 120, 119, 120, 119, 119, 136, 134, 136, 120, 119, 136, 134, 135, 119, 120, 136, 135, 135, 120, 135, 136, 119, 136, 135, 120, 120, 135, 135, 136, 135, 120, 135, 135, 136, 135, 136, 119, 120, 136, 136, 135, 119, 119, 136, 135, 119, 119, 120, 120, 135, 120, 119, 136, 119, 119, 119, 120, 135, 120, 119, 119, 136, 120, 119, 119, 120, 119, 119, 136, 135, 120, 119, 119, 136, 120
};

prog_uchar tom1[] PROGMEM = {
136, 136, 136, 137, 154, 223, 200, 109, 0, 36, 49, 5, 108, 240, 253, 235, 134, 116, 83, 35, 99, 32, 3, 57, 171, 137, 254, 255, 253, 151, 132, 118, 68, 17, 20, 102, 136, 137, 174, 255, 254, 185, 137, 135, 132, 33, 34, 85, 87, 104, 137, 187, 205, 222, 221, 185, 150, 85, 50, 35, 52, 70, 102, 136, 155, 220, 204, 188, 186, 136, 134, 101, 68, 66, 36, 84, 103, 136, 154, 187, 204, 204, 185, 152, 118, 86, 85, 84, 84, 68, 86, 103, 137, 170, 189, 220, 187, 170, 152, 118, 84, 68, 68, 68, 84, 86, 103, 137, 187, 204, 220, 186, 169, 152, 118, 85, 50, 51, 69, 85, 102, 120, 154, 171, 204, 187, 187, 169, 135, 101, 68, 67, 68, 68, 86, 119, 120, 138, 171, 188, 203, 186, 168, 135, 102, 85, 68, 68, 68, 86, 103, 136, 154, 187, 187, 170, 170, 152, 136, 118, 102, 85, 68, 68, 86, 103, 136, 137, 170, 170, 170, 170, 153, 136, 118, 101, 85, 85, 86, 102, 119, 119, 120, 153, 153, 169, 153, 154, 152, 136, 118, 102, 102, 102, 102, 102, 103, 119, 120, 136, 136, 137, 153, 153, 153, 153, 152, 135, 102, 101, 85, 86, 102, 103, 119, 120, 153, 154, 170, 170, 169, 153, 136, 119, 118, 85, 85, 69, 86, 102, 120, 137, 170, 170, 169, 153, 153, 152, 136, 119, 118, 101, 85, 85, 86, 119, 120, 137, 153, 153, 153, 153, 153, 152, 136, 119, 119, 102, 102, 101, 102, 102, 103, 119, 137, 153, 154, 169, 153, 153, 136, 135, 118, 102, 102, 102, 102, 101, 103, 120, 136, 153, 153, 153, 153, 152, 136, 136, 135, 119, 119, 118, 102, 102, 102, 103, 120, 136, 136, 136, 137, 153, 153, 153, 136, 136, 136, 119, 118, 101, 101, 85, 102, 103, 120, 153, 170, 169, 153, 136, 136, 136, 136, 136, 119, 102, 85, 85, 86, 103, 120, 152, 153, 153, 153, 153, 136, 136, 136, 136, 119, 119, 118, 102, 102, 102, 103, 119, 136, 153, 153, 153, 153, 152, 136, 136, 136, 135, 119, 119, 119, 102, 102, 102, 119, 120, 136, 137, 153, 153, 152, 136, 136, 136, 136, 119, 119, 102, 102, 102, 102, 103, 120, 137, 153, 153, 153, 153, 136, 136, 136, 136, 135, 119, 102, 102, 102, 102, 103, 120, 136, 153, 137, 136, 153, 152, 136, 136, 135, 119, 119, 119, 119, 102, 102, 119, 119, 120, 136, 153, 153, 153, 152, 136, 136, 135, 136, 136, 119, 119, 119, 102, 102, 119, 119, 119, 136, 153, 153, 153, 136, 136, 136, 136, 135, 120, 119, 119, 119, 103, 102, 102, 119, 120, 136, 137, 153, 153, 153, 136, 136, 119, 119, 119, 119, 119, 119, 102, 102, 119, 119, 136, 153, 153, 153, 153, 152, 136, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 135, 119, 119, 119, 119, 119, 119, 119, 119, 136, 136, 136, 136, 153, 136, 136, 136, 136, 135, 119, 119, 102, 102, 119, 119, 119, 136, 136, 136, 136, 136, 136, 136, 136, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 136, 136, 136, 136, 136, 136, 136, 136, 136, 119, 119, 119, 119, 119, 119, 119, 118, 119, 119, 136, 136, 153, 153, 152, 136, 136, 136, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 136, 136, 137, 153, 153, 136, 136, 136, 135, 119, 119, 119, 119, 119, 119, 119, 119, 120, 136, 136, 136, 136, 136, 136, 136, 136, 136, 119, 119, 119, 119, 119, 119, 119, 119, 119, 136, 136, 136, 136, 136, 136, 136, 136, 136, 135, 119, 119, 119, 119, 119, 119, 119, 119, 136, 136, 136, 136, 136, 136, 136, 136, 135, 119, 119, 119, 119, 119, 119
};

prog_uchar ride1[] PROGMEM = {
120, 119, 119, 119, 122, 103, 42, 12, 106, 43, 218, 125, 97, 134, 165, 110, 119, 133, 115, 215, 134, 39, 138, 154, 86, 152, 152, 102, 135, 136, 88, 165, 152, 133, 105, 151, 87, 180, 199, 86, 166, 136, 118, 135, 167, 118, 166, 187, 101, 89, 217, 195, 117, 153, 151, 101, 167, 118, 118, 170, 165, 102, 185, 119, 88, 137, 167, 150, 119, 167, 150, 153, 118, 118, 167, 149, 118, 181, 152, 118, 152, 104, 119, 119, 152, 103, 136, 119, 103, 150, 149, 86, 137, 151, 87, 118, 151, 104, 135, 136, 105, 135, 150, 119, 120, 135, 103, 136, 167, 118, 120, 137, 135, 117, 152, 152, 103, 153, 135, 119, 136, 151, 120, 136, 135, 119, 135, 119, 135, 120, 136, 135, 103, 138, 118, 119, 137, 104, 135, 152, 103, 120, 152, 120, 103, 151, 120, 120, 167, 118, 120, 168, 119, 102, 152, 152, 119, 136, 135, 103, 136, 152, 103, 137, 135, 120, 137, 118, 104, 152, 135, 104, 136, 119, 119, 136, 135, 104, 137, 135, 119, 136, 135, 119, 136, 136, 135, 120, 120, 135, 135, 134, 120, 121, 151, 119, 135, 119, 104, 137, 118, 88, 137, 135, 103, 121, 150, 120, 136, 151, 103, 119, 135, 119, 103, 136, 135, 135, 135, 135, 120, 151, 135, 120, 120, 135, 119, 135, 119, 120, 120, 119, 119, 135, 136, 119, 135, 119, 120, 136, 136, 119, 136, 150, 119, 121, 151, 102, 136, 152, 104, 103, 136, 135, 103, 137, 136, 103, 119, 119, 120, 121, 136, 118, 119, 152, 103, 153, 118, 120, 136, 135, 119, 120, 135, 103, 119, 151, 120, 135, 119, 136, 120, 135, 119, 119, 136, 119, 136, 118, 120, 136, 118, 119, 136, 135, 102, 121, 151, 103, 137, 136, 119, 120, 135, 118, 120, 152, 118, 102, 153, 134, 87, 153, 135, 119, 136, 137, 119, 119, 136, 119, 120, 153, 103, 119, 136, 119, 102, 153, 118, 120, 168, 103, 120, 151, 119, 104, 152, 119, 119, 136, 135, 120, 135, 119, 121, 136, 118, 120, 136, 119, 104, 135, 118, 121, 136, 118, 120, 136, 135, 119, 137, 133, 87, 153, 135, 103, 137, 135, 102, 138, 151, 87, 137, 168, 101, 120, 152, 119, 136, 135, 105, 152, 135, 103, 120, 152, 119, 121, 152, 118, 120, 135, 135, 103, 136, 119, 120, 151, 118, 121, 151, 119, 120, 120, 135, 137, 120, 102, 120, 135, 118, 136, 152, 118, 120, 152, 119, 120, 169, 118, 120, 136, 119, 119, 136, 119, 103, 137, 136, 119, 120, 151, 102, 137, 168, 101, 120, 152, 119, 120, 135, 102, 137, 136, 119, 136, 135, 119, 136, 136, 135, 120, 152, 135, 119, 136, 135, 119, 136, 135, 120, 152, 134, 104, 136, 135, 120, 136, 119, 120, 136, 118, 120, 136, 135, 120, 137, 135, 119, 120, 119, 119, 136, 135, 118, 153, 135, 103, 152, 135, 118, 137, 152, 102, 120, 152, 103, 121, 152, 103, 136, 136, 103, 120, 152, 102, 121, 151, 102, 105, 168, 118, 104, 152, 119, 120, 152, 118, 104, 136, 134, 104, 152, 134, 120, 136, 135, 120, 120, 135, 119, 137, 118, 120, 153, 119, 120, 153, 119, 119, 152, 118, 103, 153, 134, 103, 153, 135, 104, 136, 135, 103, 153, 135, 103, 136, 151, 119, 104, 136, 119, 121, 152, 119, 120, 152, 119, 120, 152, 118, 121, 151, 119, 103, 136, 135, 120, 136, 135, 120, 136, 135, 103, 136, 151, 119, 120, 136, 119, 136, 119, 120, 136, 134, 119, 152, 135, 119, 137, 135, 103, 137, 135, 120, 120, 136, 118, 121, 152, 102, 136, 152, 119, 120, 136, 119, 120, 152, 119, 137, 135, 119, 120, 135, 119, 119, 136, 119, 119, 135, 119, 119, 136, 151, 120, 137, 135, 120, 136, 118, 120, 136, 118, 120, 136, 135, 120, 136, 119, 136, 136, 118, 136, 136, 103, 135, 136, 136, 119, 135, 136, 135, 136, 120, 119, 136, 135, 104, 136, 119, 119, 136, 136, 119, 120, 136, 120, 136, 119, 136, 135, 119, 135, 119, 136, 119, 120, 135, 136, 136, 119, 136, 136, 120, 135, 120, 136, 135, 120, 136, 135, 119, 120, 136, 119, 136, 135, 103, 136, 135, 135, 120, 136, 119, 120, 135, 119, 120, 136, 119, 136, 120, 119, 120, 136, 103, 136, 136, 119, 119, 136, 135, 120, 136, 119, 120, 135, 135, 120, 135, 120, 136, 135, 119, 120, 135, 118, 121, 135, 118, 137, 136, 119, 137, 151, 118, 137, 136, 118, 119, 120, 136, 119, 120, 119, 135, 136, 119, 136, 136, 119, 135, 136, 119, 119, 136, 135, 136, 135, 120, 136, 135, 120, 120, 136, 135, 120, 136, 119, 120, 135, 119, 136, 135, 119, 120, 136, 118, 136, 152, 119, 120, 136, 135, 136, 136, 119, 120, 135, 119, 119, 136, 119, 119, 136, 135, 120, 119, 136, 135, 135, 136, 119, 135, 119, 120, 151, 119, 121, 135, 136, 120, 119, 135, 120, 135, 119, 136, 119, 119, 136, 120, 135, 136, 119, 119, 152, 119, 120, 136, 135, 120, 136, 135, 103, 137, 135, 119, 136, 135, 119, 135, 135, 119, 120, 135, 119, 120, 135, 135, 120, 136, 135, 120, 119, 136, 135, 120, 135, 119, 136, 119, 136, 120, 119, 136, 136, 119, 119, 135, 119, 119, 136, 119, 119, 152, 119, 120, 136, 136, 135, 120, 136, 103, 136, 119, 120, 120, 135, 120, 120, 151, 119, 120, 136, 135, 120, 135, 119, 120, 136, 119, 136, 136, 119, 120, 136, 118, 120, 136, 119, 135, 136, 119, 119, 136, 119, 120, 152, 119, 135, 136, 119, 119, 136, 135, 120, 152, 119, 135, 136, 136, 119, 135, 136, 120, 135, 119, 136, 136, 119, 120, 136, 135, 119, 136, 119, 136, 135, 119, 119, 136, 135, 120, 136, 135, 135, 120, 120, 119, 136, 120, 119, 136, 120, 120, 135, 120, 136, 119, 136, 136, 119, 135, 136, 135, 119, 136, 134, 120, 136, 119, 136, 135, 120, 119, 136, 135, 136, 135, 103, 136, 135, 119, 135, 120, 135, 119, 136, 135, 136, 135, 119, 136, 135, 119, 119, 120, 135, 119, 136, 119, 136, 135, 120, 136, 120, 119, 136, 136, 119, 136, 136, 119, 136, 136, 119, 136, 136, 119, 120, 136, 119, 120, 136, 119, 119, 136, 119, 119, 136, 119, 120, 152, 120, 120, 136, 136, 104, 136, 119, 104, 136, 119, 119, 135, 136, 120, 135, 135, 136, 136, 118, 120, 152, 119, 120, 136, 135, 119, 136, 119, 119, 136, 119, 119, 136, 135, 119, 120, 135, 119, 120, 136, 135, 119, 136, 119, 119, 135, 120, 119, 136, 119, 120, 136, 119, 120, 136, 119, 136, 120, 136, 119, 136, 136, 104, 136, 119, 119, 120, 136, 119, 121, 151, 119, 136, 135, 120, 119, 135, 119, 120, 152, 119, 136, 135, 120, 120, 120, 135, 104, 137, 135, 120, 120, 119, 136, 135, 135, 120, 136, 135, 119, 136, 119, 120, 135, 119, 136, 136, 119, 119, 136, 135, 119, 136, 119, 120, 136, 119, 119, 136, 135, 103, 136, 135, 120, 136, 136, 119, 120, 152, 119, 120, 135, 136, 119, 120, 136, 119, 136, 119, 136, 135, 120, 136, 119, 135, 135, 120, 119, 136, 135, 119, 136, 119, 119, 135, 136, 119, 120, 136, 119, 119, 136, 136, 120, 135, 119, 120, 135, 119, 120, 136, 118, 120, 135, 135, 136, 120, 119, 136, 120, 135, 136, 135, 119, 120, 136, 119, 136, 120, 120, 135, 120, 135, 119, 136, 119, 136, 120, 120, 135, 120, 136, 119, 136, 119, 120, 135, 119, 120, 135, 120, 120, 135, 135, 119, 136, 135, 120, 136, 119, 120, 120, 136, 119, 136, 135, 120, 136, 119, 119, 136, 135, 119, 121, 136, 118, 136, 136, 119, 135, 136, 135, 119, 136, 119, 136, 136, 119, 119, 136, 120, 119, 120, 120, 136, 135, 104, 136, 135, 120, 120, 119, 120, 120, 135, 119, 120, 135, 119, 120, 135, 135, 119, 136, 135, 120, 136, 135, 120, 120, 135, 135, 120, 135, 119, 136, 119, 136, 135, 119, 135, 120, 120, 135, 136, 120, 119, 136, 119, 135, 135, 120, 136, 119, 136, 120, 120, 136, 120, 136, 120, 136, 118, 136, 135, 119, 135, 119, 136, 119, 136, 135, 119, 136, 119, 136, 135, 120, 120, 119, 135, 120, 136, 135, 120, 135, 119, 136, 119, 119, 135, 120, 135, 119, 136, 119, 136, 119, 120, 151, 119, 120, 135, 120, 119, 120, 136, 103, 136, 135, 120, 135, 135, 136, 119, 136, 119, 120, 136, 119, 119, 135, 136, 119, 119, 136, 120, 135, 120, 120, 135, 120, 136, 119, 136, 136, 119, 120, 136, 135, 119, 136, 119, 120, 135, 119, 120, 120, 135, 119, 120, 135, 120, 120, 135, 120, 120, 119, 136, 120, 120, 119, 136, 119, 120, 136, 119, 135, 136, 120, 135, 136, 135, 120, 136, 119, 135, 135, 120, 119, 119, 136, 120, 136, 119, 120, 136, 119, 119, 135, 136, 119, 120, 135, 120, 136, 119, 120, 135, 135, 136, 120, 136, 119, 136, 119, 120, 135, 119, 136, 136, 120, 119, 136, 136, 119, 136, 136, 120, 119, 119, 136, 119, 136, 120, 120, 135, 120, 120, 135, 136, 118, 120, 136, 119, 136, 119, 120, 135, 119, 136, 119, 136, 120, 136, 135, 120, 136, 119, 136, 119, 119, 135, 120, 135, 119, 136, 135, 119, 136, 119, 119, 120, 136, 119, 136, 135, 119, 136, 119, 120, 135, 119, 120, 135, 120, 119, 136, 135, 120, 136, 135, 120, 120, 135, 119, 120, 135, 119, 136, 135, 119, 136, 119, 135, 136, 135, 119, 137, 135, 119, 121, 135, 119, 119, 120, 135, 119, 135, 120, 136, 135, 119, 136, 120, 135, 119, 136, 119, 136, 135, 119, 136, 135, 119, 120, 136, 119, 120, 135, 119, 120, 135, 135, 119, 135, 135, 119, 136, 135, 120, 136, 135, 119, 120, 136, 119, 120, 135, 119, 120, 119, 135, 136, 120, 135, 119, 136, 135, 120, 135, 119, 136, 119, 135, 135, 136, 119, 120, 136, 119, 136, 136, 119, 135, 136, 136, 119, 136, 135, 120, 136, 119, 119, 136, 135, 119, 136, 135, 120, 136, 119, 120, 136, 119, 120, 136, 119, 119, 136, 119, 120, 136, 119, 120, 136, 119, 135, 135, 136, 119, 136, 119, 120, 136, 119, 120, 135, 136, 119, 136, 135, 120, 136, 119, 120, 135, 119, 120, 119, 135, 120, 120, 119, 120, 136, 119, 120, 135, 119, 136, 136, 119, 119, 136, 135, 119, 136, 135, 135, 136, 120, 119, 136, 136, 103, 136, 136, 119, 119, 136, 119, 119, 136, 120, 119, 119, 120, 135, 120, 120, 119, 136, 120, 120, 135, 136, 136, 119, 120, 136, 119, 119, 120, 136, 135, 120, 120, 136, 119, 120, 136, 119, 136, 119, 119, 136, 135, 119, 136, 136, 119, 136, 136, 119, 136, 135, 136, 135, 120, 119, 119, 136, 119, 136, 135, 120, 135, 120, 136, 119, 136, 120, 120, 135, 119, 120, 135, 120, 135, 135, 135, 120, 136, 135, 120, 135, 119, 135, 120, 135, 120, 119, 119, 136, 136, 119, 119, 136, 135, 119, 120, 120, 135, 120, 120, 119, 136, 119, 120, 136, 119, 120, 120, 120, 120, 136, 135, 120, 136, 119, 136, 136, 119, 119, 120, 136, 119, 120, 135, 136, 120, 120, 135, 120, 136, 119, 120, 136, 119, 136, 120, 135, 135, 120, 119, 136, 136, 119, 135, 136, 119, 135, 120, 119, 135, 136, 120, 119, 119, 136, 135, 136, 120, 119, 136, 120, 120, 120, 120, 119, 120, 136, 119, 136, 135, 120, 136, 135, 120, 119, 136, 135, 136, 135, 119, 120, 135, 135, 120, 120, 135, 120, 136, 119, 120, 136, 119, 120, 120, 135, 135, 120, 119, 135, 136, 119, 136, 136, 119, 136, 136, 119, 135, 120, 120, 119, 136, 136, 135, 136, 120, 135, 135, 120, 119, 120, 135, 119, 136, 120, 120, 135, 120
};

// bongo1 400
prog_uchar bongo1[] PROGMEM = {
  135, 135, 135, 119, 120, 119, 137, 233, 1, 141, 185, 118, 99, 125, 199, 19, 137, 172, 150, 53, 156, 166, 86, 86, 205, 149, 54, 153, 137, 150, 55, 204, 116, 88, 136, 138, 164, 56, 202, 118, 119, 103, 155, 132, 89, 152, 120, 118, 104, 169, 119, 119, 120, 152, 85, 138, 152, 136, 117, 105, 167, 87, 152, 136, 152, 100, 122, 151, 104, 136, 120, 151, 86, 137, 135, 136, 119, 137, 135, 103, 120, 137, 134, 104, 152, 119, 119, 119, 153, 118, 120, 135, 120, 135, 104, 153, 118, 120, 119, 136, 119, 120, 152, 119, 119, 120, 136, 119, 120, 136, 135, 102, 137, 135, 120, 135, 120, 135, 103, 136, 119, 136, 118, 121, 135, 103, 136, 119, 136, 119, 136, 135, 120, 136, 136, 119, 120, 136, 136, 135, 120, 136, 119, 136, 119, 136, 119, 120, 135, 119, 136, 119, 136, 119, 120, 135, 120, 135, 120, 136, 119, 120, 120, 136, 120, 136, 119, 136, 119, 136, 135, 120, 135, 120, 135, 119, 136, 135, 120, 135, 120, 135, 119, 136, 135, 136, 119, 120, 135, 120, 136, 136, 119, 120, 136, 119, 135, 120, 136, 119
};

// bongo2 300
prog_uchar bongo2[] PROGMEM = {
135, 119, 136, 118, 139, 148, 58, 233, 19, 223, 96, 94, 213, 23, 235, 66, 157, 147, 74, 200, 53, 171, 100, 106, 150, 87, 169, 101, 138, 134, 104, 151, 103, 153, 118, 121, 135, 104, 136, 119, 136, 135, 120, 135, 119, 136, 119, 120, 135, 120, 136, 119, 136, 135, 120, 135, 119, 136, 119, 136, 135, 120, 136, 119, 136, 119, 120, 135, 119, 136, 119, 120, 135, 120, 135, 119, 136, 119, 120, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 120, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 135, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 120, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136
};

// conga 1000
prog_uchar conga[] PROGMEM = {
103, 135, 136, 120, 136, 136, 119, 119, 103, 120, 137, 153, 171, 168, 83, 70, 83, 71, 188, 167, 157, 216, 50, 37, 101, 71, 205, 201, 89, 219, 81, 34, 103, 87, 206, 220, 133, 138, 81, 34, 72, 170, 206, 201, 117, 70, 99, 53, 139, 204, 188, 216, 33, 37, 135, 86, 156, 220, 151, 136, 65, 19, 122, 151, 138, 204, 167, 102, 82, 19, 105, 203, 171, 202, 135, 84, 50, 19, 156, 238, 202, 169, 82, 35, 86, 85, 157, 237, 167, 102, 100, 52, 104, 152, 138, 220, 167, 67, 69, 69, 120, 170, 170, 187, 150, 84, 68, 70, 139, 187, 186, 169, 116, 34, 70, 119, 156, 221, 168, 102, 100, 50, 71, 171, 170, 187, 167, 84, 69, 85, 104, 171, 186, 153, 134, 85, 69, 86, 137, 187, 186, 152, 117, 68, 86, 103, 138, 204, 185, 117, 85, 68, 87, 154, 170, 171, 168, 84, 52, 86, 137, 170, 170, 153, 135, 100, 69, 103, 154, 186, 152, 136, 119, 84, 69, 120, 154, 187, 168, 102, 102, 101, 85, 121, 171, 186, 152, 84, 69, 103, 119, 137, 171, 169, 134, 84, 69, 120, 153, 153, 153, 152, 118, 84, 86, 137, 153, 153, 152, 119, 102, 101, 86, 137, 170, 169, 135, 118, 85, 102, 119, 137, 171, 168, 118, 85, 86, 119, 137, 154, 169, 136, 118, 85, 87, 137, 153, 153, 153, 134, 102, 102, 103, 137, 170, 152, 136, 118, 101, 102, 120, 137, 170, 152, 119, 102, 102, 103, 137, 153, 153, 135, 118, 101, 102, 120, 153, 153, 152, 135, 102, 102, 119, 137, 153, 152, 135, 119, 102, 103, 120, 137, 153, 152, 119, 102, 102, 119, 136, 153, 153, 136, 118, 102, 103, 120, 153, 152, 136, 135, 102, 102, 119, 137, 153, 152, 119, 119, 118, 102, 120, 153, 153, 136, 119, 103, 119, 119, 120, 153, 153, 135, 118, 102, 119, 120, 136, 137, 152, 135, 102, 102, 120, 136, 136, 136, 136, 119, 102, 103, 120, 153, 152, 136, 119, 119, 119, 119, 136, 153, 152, 135, 119, 119, 119, 119, 136, 153, 136, 135, 102, 103, 119, 136, 136, 152, 136, 119, 102, 103, 120, 136, 136, 136, 135, 119, 103, 119, 136, 137, 136, 135, 119, 119, 119, 120, 136, 136, 136, 135, 119, 119, 119, 136, 136, 136, 135, 119, 119, 119, 120, 136, 136, 136, 135, 119, 119, 119, 136, 136, 136, 135, 119, 119, 119, 120, 136, 136, 136, 119, 119, 119, 120, 136, 136, 136, 136, 119, 119, 119, 120, 136, 136, 136, 135, 119, 119, 119, 136, 136, 136, 135, 119, 119, 119, 120, 136, 136, 136, 119, 119, 119, 119, 136, 136, 136, 135, 119, 119, 119, 120, 136, 136, 136, 135, 119, 119, 120, 136, 136, 136, 136, 119, 119, 119, 120, 136, 136, 136, 119, 119, 119, 119, 136, 136, 136, 135, 119, 119, 119, 120, 136, 136, 136, 135, 119, 119, 120, 136, 136
};

// crash 2000
prog_uchar crash1[] PROGMEM = {
136, 120, 120, 120, 120, 119, 119, 136, 119, 119, 120, 135, 120, 120, 136, 119, 119, 136, 135, 103, 121, 135, 88, 174, 165, 34, 71, 206, 215, 49, 105, 186, 117, 107, 183, 70, 105, 150, 166, 138, 116, 140, 100, 68, 108, 207, 182, 32, 43, 203, 133, 119, 136, 102, 122, 118, 167, 149, 121, 196, 69, 155, 151, 124, 115, 72, 119, 90, 218, 100, 90, 137, 120, 87, 198, 85, 136, 184, 100, 137, 152, 120, 134, 70, 138, 204, 131, 84, 138, 167, 105, 120, 71, 140, 167, 101, 70, 157, 200, 66, 101, 187, 169, 134, 68, 89, 188, 119, 102, 104, 138, 120, 89, 136, 103, 120, 118, 120, 187, 133, 52, 169, 136, 103, 171, 150, 39, 104, 138, 137, 117, 136, 117, 152, 183, 86, 137, 133, 119, 120, 136, 137, 117, 104, 153, 118, 136, 151, 88, 154, 135, 71, 137, 152, 87, 118, 155, 135, 103, 137, 119, 135, 120, 122, 152, 133, 118, 103, 172, 134, 87, 136, 121, 137, 119, 118, 135, 184, 132, 103, 185, 134, 88, 137, 102, 104, 168, 119, 104, 120, 153, 102, 102, 138, 152, 102, 137, 134, 102, 153, 120, 86, 123, 169, 70, 105, 136, 135, 136, 119, 88, 153, 136, 119, 135, 135, 134, 135, 168, 133, 134, 135, 104, 152, 135, 104, 137, 119, 121, 135, 118, 120, 136, 136, 135, 103, 120, 151, 136, 136, 150, 135, 152, 120, 105, 103, 105, 136, 87, 120, 137, 135, 118, 120, 152, 133, 120, 153, 134, 119, 137, 118, 121, 135, 136, 137, 102, 120, 137, 135, 104, 136, 119, 120, 135, 119, 135, 136, 103, 137, 119, 120, 119, 119, 136, 134, 135, 135, 135, 151, 135, 118, 120, 154, 118, 120, 119, 103, 136, 120, 136, 118, 119, 136, 135, 121, 151, 117, 120, 135, 136, 136, 136, 119, 86, 122, 170, 134, 86, 136, 135, 153, 118, 120, 136, 103, 136, 119, 121, 152, 118, 103, 121, 169, 118, 119, 118, 121, 169, 101, 104, 136, 136, 136, 104, 120, 120, 135, 135, 135, 136, 134, 119, 135, 136, 152, 119, 104, 137, 136, 119, 119, 136, 135, 135, 136, 151, 134, 119, 153, 150, 103, 137, 135, 104, 137, 119, 120, 137, 119, 120, 136, 120, 135, 119, 135, 136, 135, 134, 119, 121, 136, 102, 104, 153, 119, 119, 135, 136, 135, 135, 119, 120, 121, 119, 120, 137, 135, 118, 135, 150, 136, 136, 118, 119, 121, 120, 120, 120, 119, 104, 136, 151, 134, 135, 119, 136, 136, 120, 120, 135, 135, 135, 135, 136, 118, 104, 137, 104, 120, 120, 120, 103, 121, 136, 135, 119, 119, 137, 135, 119, 136, 120, 136, 119, 120, 136, 135, 119, 135, 135, 120, 135, 119, 136, 134, 136, 135, 119, 137, 135, 119, 120, 136, 151, 119, 120, 120, 135, 119, 136, 118, 121, 151, 103, 136, 120, 152, 118, 103, 137, 152, 118, 103, 137, 136, 119, 136, 120, 119, 135, 134, 119, 137, 119, 119, 120, 121, 135, 120, 135, 103, 120, 136, 136, 118, 104, 136, 119, 120, 120, 136, 135, 119, 135, 136, 135, 134, 103, 136, 152, 135, 103, 120, 136, 136, 119, 103, 121, 152, 102, 120, 152, 135, 119, 119, 120, 136, 120, 135, 103, 137, 152, 118, 103, 136, 136, 119, 120, 120, 120, 136, 119, 119, 135, 135, 118, 151, 136, 136, 119, 120, 120, 136, 119, 119, 136, 135, 120, 119, 120, 136, 136, 119, 119, 137, 135, 119, 136, 120, 136, 119, 119, 120, 120, 120, 136, 119, 119, 136, 120, 135, 119, 120, 135, 135, 119, 120, 136, 135, 119, 120, 135, 136, 120, 120, 119, 120, 136, 119, 120, 135, 135, 135, 136, 119, 119, 135, 120, 120, 136, 119, 119, 119, 120, 136, 135, 119, 119, 136, 135, 120, 119, 119, 135, 136, 135, 119, 135, 135, 136, 120, 136, 135, 119, 120, 136, 119, 119, 120, 136, 120, 152, 119, 119, 136, 135, 136, 136, 119, 120, 136, 119, 119, 120, 135, 119, 120, 135, 120, 120, 119, 120, 136, 136, 134, 118, 136, 152, 135, 103, 136, 135, 120, 120, 120, 137, 119, 119, 135, 136, 151, 135, 119, 136, 136, 136, 119, 119, 136, 135, 120, 135, 119, 136, 136, 119, 120, 136, 135, 119, 120, 136, 135, 135, 119, 136, 135, 119, 120, 136, 120, 120, 119, 120, 136, 135, 135, 135, 135, 119, 136, 135, 135, 136, 120, 120, 120, 120, 120, 119, 120, 135, 135, 135, 135, 135, 135, 119, 120, 120, 120, 120, 120, 120, 136, 135, 119, 135, 135, 135, 120, 136, 119, 120, 120, 120, 136, 135, 135, 136, 135, 136, 135, 119, 136, 136, 119, 120, 119, 120, 136, 119, 119, 135, 136, 136, 119, 119, 136, 119, 135, 136, 120, 135, 119, 119, 136, 136, 119, 119, 136, 136, 119, 120, 119, 136, 120, 136, 135, 119, 151, 135, 135, 119, 136, 120, 120, 120, 119, 120, 136, 135, 119, 136, 135, 119, 136, 119, 136, 136, 135, 119, 120, 135, 119, 119, 119, 136, 119, 119, 120, 120, 119, 120, 136, 135, 119, 135, 119, 136, 135, 119, 120, 136, 136, 120, 119, 119, 136, 135, 120, 135, 119, 120, 136, 136, 119, 120, 136, 119, 120, 136, 119, 119, 136, 136, 119, 119, 135, 120, 136, 135, 119, 136, 135, 119, 120, 136, 135, 119, 119, 136, 135, 119, 120, 120, 136, 119, 119, 135, 136, 135, 119, 120, 136, 136, 119, 104, 136, 119, 119, 119, 136, 135, 119, 119, 136, 136, 135, 119, 119, 136, 136, 119, 120, 136, 135, 119, 119, 120, 136, 135, 119, 136, 136, 119, 119, 135, 135, 135, 119, 120, 120, 136, 119, 119, 120, 136, 135, 119, 136, 136, 135, 119, 136, 135, 120, 119, 119, 136, 135, 119, 119, 136, 136, 119, 119, 136, 136, 119, 136, 136, 119, 119, 136, 136, 135, 120, 119, 120, 136, 136, 119, 120, 136, 119, 136, 136, 119
};

// cymball 2000
prog_uchar crash2[] PROGMEM = {
119, 167, 73, 89, 163, 73, 139, 198, 100, 119, 249, 18, 167, 218, 3, 184, 235, 132, 52, 170, 167, 19, 201, 235, 71, 130, 120, 120, 167, 185, 102, 70, 167, 152, 118, 103, 184, 103, 134, 183, 73, 104, 198, 103, 103, 134, 155, 136, 101, 87, 135, 168, 139, 118, 133, 134, 153, 153, 135, 101, 102, 154, 138, 120, 133, 117, 120, 153, 151, 120, 133, 102, 138, 184, 123, 68, 133, 135, 87, 173, 170, 115, 84, 104, 171, 152, 134, 163, 85, 139, 201, 154, 66, 83, 140, 156, 166, 117, 100, 104, 171, 168, 135, 99, 86, 138, 155, 201, 100, 21, 119, 188, 186, 70, 102, 103, 105, 204, 154, 35, 99, 186, 155, 137, 117, 66, 89, 206, 201, 51, 37, 166, 138, 188, 165, 20, 72, 187, 152, 120, 106, 99, 114, 143, 252, 96, 21, 121, 218, 167, 89, 135, 83, 87, 206, 184, 52, 119, 134, 89, 190, 151, 67, 53, 171, 217, 84, 101, 151, 136, 154, 136, 37, 106, 169, 104, 137, 151, 85, 119, 186, 182, 86, 104, 134, 154, 169, 86, 87, 103, 137, 202, 120, 53, 102, 122, 201, 135, 70, 103, 169, 103, 153, 155, 70, 101, 153, 150, 165, 137, 103, 151, 102, 120, 137, 120, 137, 86, 121, 186, 85, 40, 155, 169, 120, 38, 103, 183, 156, 151, 116, 70, 137, 201, 136, 104, 68, 136, 173, 184, 84, 38, 136, 219, 151, 103, 87, 104, 121, 152, 135, 55, 90, 170, 118, 121, 121, 70, 137, 169, 118, 134, 87, 137, 166, 185, 149, 50, 73, 173, 216, 102, 87, 87, 138, 152, 151, 116, 103, 171, 151, 136, 117, 55, 153, 154, 137, 116, 89, 133, 121, 155, 133, 149, 57, 136, 133, 140, 156, 101, 83, 72, 154, 231, 103, 102, 132, 135, 171, 120, 85, 76, 138, 151, 104, 88, 85, 138, 168, 168, 118, 52, 154, 185, 166, 118, 39, 137, 186, 134, 135, 102, 89, 139, 152, 134, 56, 105, 170, 135, 102, 167, 87, 104, 182, 153, 133, 119, 123, 102, 135, 136, 87, 138, 122, 117, 103, 122, 136, 104, 105, 151, 165, 86, 106, 200, 147, 102, 104, 136, 170, 103, 99, 121, 156, 120, 116, 116, 104, 168, 156, 119, 100, 86, 138, 139, 137, 135, 83, 103, 189, 120, 103, 88, 121, 121, 122, 103, 118, 135, 118, 200, 121, 100, 149, 122, 120, 188, 117, 53, 105, 121, 172, 153, 99, 68, 122, 219, 182, 83, 86, 168, 138, 155, 117, 69, 121, 153, 154, 150, 68, 103, 185, 172, 101, 68, 120, 155, 150, 151, 103, 118, 182, 137, 136, 87, 119, 152, 87, 122, 171, 86, 86, 103, 153, 139, 152, 115, 71, 136, 203, 148, 71, 133, 134, 155, 168, 135, 53, 136, 171, 120, 118, 55, 138, 186, 104, 167, 67, 90, 217, 119, 103, 152, 136, 117, 120, 154, 134, 119, 88, 135, 154, 120, 101, 104, 152, 135, 136, 120, 134, 135, 137, 90, 134, 102, 120, 153, 136, 119, 87, 104, 183, 121, 86, 136, 169, 134, 120, 119, 135, 103, 122, 181, 71, 123, 166, 135, 71, 137, 153, 55, 121, 153, 119, 86, 138, 167, 102, 135, 167, 118, 136, 184, 102, 103, 137, 103, 104, 153, 152, 134, 87, 119, 150, 154, 151, 68, 122, 168, 136, 119, 118, 88, 137, 184, 105, 118, 86, 122, 153, 151, 101, 90, 118, 152, 153, 149, 134, 105, 135, 134, 153, 105, 103, 121, 152, 86, 121, 165, 87, 122, 167, 133, 103, 104, 119, 168, 104, 150, 119, 105, 166, 168, 103, 102, 104, 154, 167, 105, 102, 71, 154, 168, 120, 119, 101, 106, 186, 133, 119, 103, 119, 152, 120, 168, 138, 68, 119, 169, 134, 136, 118, 102, 152, 168, 135, 102, 120, 121, 152, 136, 134, 71, 121, 184, 137, 118, 86, 88, 153, 185, 150, 69, 121, 184, 104, 118, 120, 133, 152, 122, 115, 137, 121, 118, 136, 122, 120, 121, 118, 104, 153, 150, 102, 104, 149, 169, 152, 102, 120, 134, 152, 136, 103, 134, 103, 151, 185, 103, 102, 104, 138, 184, 119, 103, 104, 153, 167, 102, 119, 122, 153, 136, 86, 120, 121, 137, 151, 117, 102, 121, 137, 169, 117, 84, 138, 153, 152, 117, 103, 138, 137, 137, 102, 119, 121, 105, 151, 121, 102, 118, 153, 119, 137, 135, 118, 136, 106, 153, 150, 70, 120, 169, 120, 136, 119, 117, 137, 104, 151, 135, 69, 185, 154, 103, 135, 117, 103, 155, 136, 118, 87, 154, 167, 87, 104, 136, 135, 134, 135, 105, 152, 150, 118, 119, 152, 105, 135, 119, 137, 104, 105, 152, 100, 120, 120, 120, 153, 134, 86, 121, 139, 119, 117, 134, 153, 167, 120, 134, 116, 136, 139, 120, 103, 102, 151, 153, 103, 137, 134, 118, 152, 167, 103, 89, 150, 152, 135, 104, 105, 150, 152, 151, 102, 88, 135, 167, 135, 105, 121, 105, 135, 102, 121, 137, 135, 103, 151, 136, 120, 120, 104, 119, 151, 121, 121, 102, 135, 167, 136, 102, 103, 167, 135, 137, 135, 104, 119, 152, 134, 119, 138, 119, 150, 153, 103, 104, 105, 153, 149, 102, 121, 120, 150, 150, 136, 135, 103, 120, 151, 136, 137, 118, 103, 121, 167, 149, 88, 104, 134, 152, 169, 118, 86, 122, 152, 151, 119, 104, 136, 119, 154, 149, 70, 122, 136, 151, 118, 135, 137, 119, 136, 119, 135, 122, 120, 134, 121, 152, 86, 120, 151, 120, 151, 118, 103, 104, 152, 167, 103, 122, 119, 134, 152, 153, 133, 102, 136, 168, 150, 119, 105, 119, 153, 153, 101, 72, 155, 167, 118, 135, 136, 87, 136, 152, 119, 118, 106, 136, 149, 136, 104, 103, 137, 151, 103, 121, 137, 121, 118, 103, 168, 120, 136, 151, 103, 167, 152, 88, 102, 153, 135, 119, 121, 120, 150, 117, 136, 135, 137, 150, 117, 137, 152, 120, 103, 103, 151, 151
};

// dnbkick 1500
prog_uchar dnbkick[] PROGMEM = {
152, 120, 120, 120, 136, 136, 136, 118, 84, 51, 51, 69, 104, 171, 204, 203, 168, 118, 85, 86, 121, 172, 222, 238, 237, 186, 134, 84, 51, 68, 87, 137, 170, 170, 151, 100, 50, 16, 0, 1, 52, 103, 154, 187, 203, 187, 169, 135, 101, 85, 102, 121, 171, 205, 222, 238, 220, 186, 151, 100, 50, 33, 17, 34, 52, 87, 136, 154, 170, 169, 136, 118, 84, 67, 51, 68, 86, 121, 171, 205, 238, 239, 254, 237, 203, 169, 135, 84, 51, 34, 34, 35, 68, 86, 120, 153, 170, 170, 169, 152, 119, 101, 68, 51, 51, 52, 85, 103, 137, 171, 205, 238, 239, 255, 238, 221, 203, 168, 118, 84, 50, 17, 0, 0, 1, 18, 52, 69, 103, 137, 170, 187, 204, 204, 204, 187, 170, 152, 135, 118, 101, 85, 85, 86, 103, 120, 137, 154, 171, 187, 187, 187, 170, 153, 135, 118, 84, 67, 34, 33, 17, 17, 34, 51, 69, 103, 137, 170, 188, 221, 238, 255, 255, 255, 255, 238, 220, 187, 169, 135, 101, 67, 50, 17, 0, 0, 0, 0, 17, 18, 51, 69, 103, 120, 154, 187, 205, 222, 238, 239, 255, 254, 238, 237, 220, 187, 169, 152, 118, 101, 68, 51, 34, 17, 17, 17, 17, 18, 34, 52, 69, 86, 119, 137, 154, 187, 204, 221, 222, 238, 238, 238, 238, 221, 220, 203, 186, 153, 136, 118, 101, 68, 51, 34, 33, 17, 17, 17, 17, 34, 35, 52, 69, 86, 119, 137, 154, 171, 188, 205, 221, 238, 238, 238, 238, 238, 221, 220, 203, 186, 169, 136, 119, 101, 84, 67, 50, 34, 17, 17, 17, 17, 17, 34, 35, 52, 69, 86, 103, 136, 153, 170, 187, 204, 221, 221, 222, 238, 238, 237, 221, 220, 204, 187, 170, 153, 136, 119, 102, 85, 68, 67, 51, 50, 34, 34, 34, 51, 51, 68, 69, 85, 102, 119, 136, 137, 154, 170, 187, 187, 204, 204, 204, 204, 203, 187, 187, 170, 169, 153, 136, 135, 119, 102, 101, 85, 85, 84, 68, 68, 68, 85, 85, 85, 102, 102, 119, 119, 136, 136, 153, 153, 154, 170, 170, 170, 170, 170, 170, 169, 153, 153, 152, 136, 136, 135, 119, 119, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 119, 119, 119, 119, 136, 136, 136, 136, 137, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 136, 136, 136, 136, 119, 119, 119, 119, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 119, 119, 119, 136, 136, 137, 153, 153, 154, 170, 170, 170, 170, 170, 170, 170, 170, 170, 153, 153, 153, 136, 136, 135, 119, 118, 102, 102, 101, 85, 85, 85, 85, 85, 85, 85, 85, 85, 86, 102, 102, 103, 119, 119, 136, 136, 136, 153, 153, 153, 153, 170, 170, 170, 170, 170, 153, 153, 153, 153, 153, 136, 136, 136, 135, 119, 119, 119, 119, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 103, 119, 119, 119, 119, 136, 136, 136, 136, 137, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 152, 136, 136, 136, 135, 119, 119, 119, 102, 102, 102, 102, 102, 101, 85, 85, 85, 102, 102, 102, 102, 102, 102, 119, 119, 119, 120, 136, 136, 136, 137, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 152, 136, 136, 136, 136, 136, 119, 119, 119, 119, 119, 119, 118, 102, 102, 102, 102, 102, 102, 102, 102, 102, 119, 119, 119, 119, 119, 119, 119, 136, 136, 136, 136, 136, 136, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 136, 136, 136, 136, 136, 136, 119, 119, 119, 119, 119, 118, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 119, 119, 119, 119, 119, 119, 120, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 135, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 120, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 136, 136
};

// djscratch 720
prog_uchar djscratch[] PROGMEM = {
135, 136, 119, 120, 135, 119, 120, 120, 119, 120, 136, 120, 120, 136, 119, 136, 136, 120, 120, 136, 119, 136, 135, 119, 135, 136, 135, 120, 136, 119, 120, 120, 119, 119, 135, 135, 120, 119, 135, 135, 120, 136, 119, 135, 135, 151, 119, 120, 135, 119, 135, 135, 136, 120, 119, 136, 105, 120, 120, 121, 135, 104, 121, 134, 120, 135, 134, 135, 151, 120, 105, 136, 120, 119, 150, 151, 135, 105, 119, 120, 118, 152, 104, 119, 136, 135, 104, 120, 119, 136, 104, 150, 135, 135, 134, 136, 134, 151, 134, 136, 119, 120, 120, 104, 135, 135, 105, 134, 137, 118, 136, 119, 120, 135, 119, 136, 135, 119, 136, 136, 119, 135, 120, 119, 136, 136, 119, 120, 136, 135, 120, 136, 119, 137, 118, 137, 102, 152, 104, 134, 136, 120, 120, 135, 134, 151, 134, 137, 103, 121, 120, 120, 121, 118, 152, 103, 136, 104, 121, 119, 120, 120, 119, 133, 138, 103, 120, 118, 167, 135, 121, 105, 119, 135, 104, 150, 149, 135, 151, 119, 136, 132, 136, 153, 86, 137, 136, 104, 118, 167, 166, 103, 137, 151, 101, 154, 135, 88, 136, 136, 118, 138, 119, 90, 136, 118, 119, 183, 101, 153, 151, 87, 155, 85, 106, 137, 101, 122, 134, 89, 152, 102, 138, 134, 104, 152, 101, 170, 116, 122, 167, 85, 186, 100, 138, 151, 71, 186, 100, 122, 150, 74, 166, 88, 153, 132, 107, 149, 90, 167, 101, 154, 134, 104, 169, 85, 170, 85, 138, 135, 102, 155, 86, 108, 135, 57, 154, 87, 105, 121, 101, 155, 131, 120, 183, 118, 105, 155, 85, 105, 183, 116, 139, 136, 73, 120, 136, 151, 89, 137, 117, 136, 136, 104, 135, 121, 118, 150, 135, 134, 166, 136, 120, 121, 134, 136, 120, 121, 134, 137, 118, 151, 120, 118, 136, 150, 136, 119, 152, 118, 137, 136, 103, 152, 119, 135, 136, 119, 136, 119, 136, 119, 120, 135, 119, 120, 135, 119, 135, 136, 119, 136, 135, 135, 120, 136, 120, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136
};

// kick 2 1500
prog_uchar kick2[] PROGMEM = {
119, 135, 135, 136, 136, 136, 136, 136, 135, 136, 136, 136, 136, 135, 135, 135, 119, 102, 85, 85, 85, 83, 154, 173, 254, 255, 254, 238, 237, 220, 185, 133, 51, 1, 0, 1, 17, 17, 34, 18, 51, 86, 137, 155, 204, 206, 238, 221, 204, 186, 153, 136, 119, 119, 135, 136, 137, 154, 170, 170, 153, 136, 136, 119, 118, 102, 118, 119, 120, 153, 154, 171, 186, 187, 170, 153, 135, 102, 85, 67, 50, 34, 34, 34, 35, 51, 52, 68, 85, 103, 119, 137, 154, 170, 187, 187, 187, 187, 170, 170, 153, 153, 153, 153, 153, 153, 153, 153, 136, 136, 119, 119, 118, 103, 119, 119, 136, 136, 136, 136, 136, 136, 120, 119, 119, 102, 102, 102, 85, 85, 86, 102, 103, 119, 136, 136, 152, 153, 153, 153, 153, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 119, 119, 119, 136, 136, 136, 136, 136, 135, 119, 119, 119, 119, 102, 119, 103, 119, 119, 119, 119, 119, 119, 136, 136, 136, 136, 120, 136, 136, 136, 136, 136, 120, 120, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 120, 136, 119, 136, 136, 136, 136, 136, 136, 136, 136, 136, 135, 119, 119, 119, 119, 119, 118, 119, 119, 119, 119, 119, 119, 119, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 152, 136, 136, 136, 136, 135, 119, 119, 118, 102, 102, 102, 102, 103, 119, 120, 136, 136, 153, 153, 153, 153, 153, 136, 136, 135, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 135, 136, 136, 136, 136, 136, 136, 136, 136, 136, 119, 119, 119, 119, 119, 119, 119, 119, 119, 136, 136, 136, 136, 119, 119, 119, 119, 119, 119, 120, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 119, 119, 119, 119, 119, 119, 119, 119, 136, 136, 136, 136, 136, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 120, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 120, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 120, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 135, 119, 119, 119, 119, 119, 119, 119, 119, 120, 136, 136, 136, 136, 136, 136, 136, 135, 135, 119, 119, 119, 136, 136, 136, 136, 136, 136, 136, 119, 119, 119, 119, 119, 119, 119, 119, 120, 136, 136, 136, 136, 136, 136, 136, 136, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 120, 136, 136, 136, 136, 136, 136, 135, 119, 119, 120, 136, 136, 136, 136, 136, 136, 136, 136, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 120, 136, 136, 136, 136, 135, 119, 119, 119, 119, 119, 136, 136, 136, 136, 136, 136, 136, 136, 135, 119, 119, 119, 119, 119, 119, 119, 119, 119, 120, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 135, 135, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 120, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 120, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 119, 119, 119, 119, 119, 119, 120, 136, 119, 119, 119, 119, 119, 119, 119, 119, 136, 136, 136, 136, 136, 136, 136, 136, 136, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 120, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 120, 136, 136, 136, 136, 136, 136, 136
};

// kick 3 1500
prog_uchar kick3[] PROGMEM = {
120, 120, 120, 120, 120, 120, 120, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 135, 101, 67, 69, 140, 239, 236, 183, 66, 17, 36, 88, 189, 255, 237, 168, 83, 33, 35, 69, 122, 206, 254, 220, 169, 100, 33, 18, 35, 86, 138, 189, 238, 220, 186, 134, 67, 33, 18, 51, 86, 121, 172, 222, 238, 220, 185, 135, 84, 50, 33, 35, 52, 86, 121, 171, 205, 222, 237, 203, 169, 135, 100, 50, 34, 34, 35, 69, 103, 136, 154, 188, 221, 238, 237, 204, 186, 152, 118, 84, 50, 34, 34, 35, 52, 86, 120, 137, 170, 188, 204, 221, 221, 220, 186, 169, 135, 101, 84, 51, 34, 34, 34, 51, 68, 86, 119, 137, 170, 187, 204, 205, 221, 221, 220, 204, 186, 153, 135, 102, 85, 68, 51, 34, 34, 34, 51, 52, 69, 102, 120, 137, 154, 171, 187, 188, 204, 204, 204, 203, 187, 170, 153, 136, 119, 102, 85, 84, 68, 68, 51, 52, 68, 69, 85, 102, 119, 136, 137, 153, 170, 170, 170, 171, 187, 186, 170, 170, 169, 153, 136, 135, 118, 102, 101, 85, 85, 85, 85, 85, 85, 85, 102, 103, 119, 120, 136, 153, 153, 170, 170, 170, 170, 170, 170, 153, 153, 153, 136, 136, 135, 119, 102, 102, 101, 85, 85, 85, 85, 85, 86, 102, 102, 103, 119, 136, 136, 153, 153, 154, 170, 170, 170, 170, 170, 153, 153, 153, 136, 136, 136, 119, 119, 102, 102, 101, 85, 85, 85, 85, 85, 102, 102, 102, 103, 119, 119, 136, 136, 153, 153, 154, 170, 170, 170, 170, 170, 153, 153, 153, 152, 136, 136, 119, 119, 118, 102, 102, 85, 85, 85, 85, 85, 86, 102, 102, 102, 119, 119, 120, 136, 136, 153, 153, 154, 170, 170, 170, 170, 170, 153, 153, 153, 152, 136, 136, 119, 119, 118, 102, 102, 101, 85, 85, 85, 85, 86, 102, 102, 102, 103, 119, 119, 136, 136, 137, 153, 153, 154, 170, 170, 170, 170, 169, 153, 153, 153, 136, 136, 135, 119, 119, 102, 102, 102, 101, 85, 85, 85, 85, 102, 102, 102, 102, 119, 119, 120, 136, 136, 153, 153, 153, 154, 170, 170, 170, 170, 153, 153, 153, 153, 136, 136, 135, 119, 119, 118, 102, 102, 102, 85, 85, 85, 86, 102, 102, 102, 102, 119, 119, 120, 136, 136, 137, 153, 153, 153, 154, 170, 170, 169, 153, 153, 153, 153, 136, 136, 136, 119, 119, 118, 102, 102, 102, 102, 85, 85, 86, 102, 102, 102, 102, 119, 119, 119, 136, 136, 136, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 152, 136, 136, 135, 119, 119, 118, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 103, 119, 119, 120, 136, 136, 137, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 136, 136, 136, 119, 119, 119, 118, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 119, 119, 119, 120, 136, 136, 136, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 152, 136, 136, 136, 119, 119, 119, 119, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 119, 119, 119, 120, 136, 136, 136, 137, 153, 153, 153, 153, 153, 153, 153, 153, 153, 152, 136, 136, 136, 135, 119, 119, 119, 118, 102, 102, 102, 102, 102, 102, 102, 102, 102, 119, 119, 119, 119, 136, 136, 136, 136, 137, 153, 153, 153, 153, 153, 153, 153, 153, 152, 136, 136, 136, 136, 119, 119, 119, 119, 119, 102, 102, 102, 102, 102, 102, 102, 102, 119, 119, 119, 119, 119, 136, 136, 136, 136, 136, 153, 153, 153, 153, 153, 153, 153, 153, 136, 136, 136, 136, 136, 119, 119, 119, 119, 118, 102, 102, 102, 102, 102, 102, 102, 102, 119, 119, 119, 119, 120, 136, 136, 136, 136, 137, 153, 153, 153, 153, 153, 153, 153, 152, 136, 136, 136, 136, 135, 119, 119, 119, 119, 118, 102, 102, 102, 102, 102, 102, 102, 103, 119, 119, 119, 119, 120, 136, 136, 136, 136, 137, 153, 153, 153, 153, 153, 153, 153, 136, 136, 136, 136, 136, 135, 119, 119, 119, 119, 118, 102, 102, 102, 102, 102, 102, 103, 119, 119, 119, 119, 119, 136, 136, 136, 136, 136, 136, 153, 153, 153, 153, 153, 153, 136, 136, 136, 136, 136, 136, 119, 119, 119, 119, 119, 119, 118, 102, 102, 102, 102, 103, 119, 119, 119, 119
};

// snare2 900
prog_uchar snare2[] PROGMEM = {
119, 119, 120, 136, 136, 118, 84, 87, 135, 116, 121, 239, 235, 136, 136, 117, 32, 4, 104, 123, 239, 251, 136, 134, 102, 66, 51, 86, 136, 171, 187, 188, 185, 135, 133, 81, 18, 86, 121, 139, 206, 218, 153, 135, 83, 16, 53, 136, 152, 155, 187, 186, 153, 135, 116, 52, 54, 119, 135, 122, 140, 221, 185, 120, 101, 51, 70, 86, 119, 154, 171, 171, 170, 136, 87, 53, 69, 134, 149, 135, 123, 141, 154, 152, 135, 135, 102, 85, 68, 85, 137, 187, 186, 154, 121, 104, 101, 100, 85, 88, 153, 152, 153, 138, 153, 136, 136, 117, 69, 102, 102, 120, 138, 153, 168, 168, 151, 118, 102, 102, 102, 134, 135, 137, 153, 135, 136, 137, 135, 135, 119, 86, 101, 119, 137, 153, 155, 154, 152, 135, 101, 86, 102, 135, 136, 138, 153, 120, 120, 119, 120, 137, 119, 101, 102, 120, 152, 152, 136, 138, 137, 135, 118, 103, 102, 103, 136, 152, 136, 153, 152, 135, 120, 120, 119, 119, 119, 119, 135, 135, 136, 121, 121, 136, 135, 119, 103, 119, 120, 119, 119, 136, 152, 135, 135, 136, 136, 135, 119, 118, 119, 137, 121, 120, 136, 136, 119, 119, 119, 120, 119, 119, 120, 120, 137, 136, 119, 120, 120, 120, 135, 119, 120, 136, 136, 119, 119, 152, 135, 135, 135, 135, 135, 135, 119, 120, 135, 135, 136, 136, 136, 119, 120, 120, 119, 119, 119, 136, 136, 136, 136, 136, 119, 119, 103, 119, 119, 120, 136, 136, 136, 119, 118, 119, 119, 120, 136, 120, 120, 120, 119, 119, 136, 136, 136, 120, 135, 136, 120, 120, 119, 119, 119, 136, 136, 136, 136, 120, 119, 119, 119, 120, 136, 136, 136, 136, 136, 135, 119, 119, 119, 120, 136, 136, 136, 136, 135, 119, 119, 119, 119, 136, 136, 136, 136, 135, 119, 119, 120, 136, 120, 136, 120, 120, 119, 119, 136, 136, 136, 136, 120, 119, 119, 119, 120, 135, 136, 136, 120, 135, 119, 119, 135, 119, 120, 120, 120, 136, 136, 136, 119, 120, 135, 119, 119, 136, 136, 136, 136, 136, 119, 119, 119, 119, 120, 136, 136, 136, 119, 135, 119, 119, 120, 120, 136, 136, 136, 135, 119, 119, 119, 119, 136, 120, 136, 136, 119, 120, 119, 120, 136, 119, 136, 136, 136, 136, 119, 119, 135, 119, 119, 119, 120, 120, 119, 136, 136, 119, 120, 119, 119, 136, 119, 135, 135, 135, 119, 135, 135, 136, 136, 136, 135, 120, 119, 119, 120, 136, 136, 136, 135, 135, 119, 119, 119, 119, 120, 136, 136, 136, 135, 119, 119, 119, 120, 119, 136, 136, 136, 136
};

// tambourine 500
prog_uchar tambourine[] PROGMEM = {
120, 136, 136, 135, 120, 120, 119, 120, 136, 135, 119, 120, 135, 137, 138, 92, 60, 57, 58, 153, 135, 135, 166, 149, 181, 149, 134, 104, 106, 138, 121, 102, 120, 135, 135, 135, 135, 102, 88, 122, 137, 121, 137, 121, 119, 135, 150, 150, 133, 116, 167, 151, 167, 152, 88, 75, 123, 135, 119, 167, 150, 134, 134, 134, 133, 150, 135, 102, 120, 153, 152, 167, 166, 132, 118, 136, 152, 136, 120, 119, 136, 119, 104, 121, 138, 105, 121, 120, 88, 104, 104, 120, 137, 136, 135, 119, 136, 136, 119, 118, 135, 152, 135, 118, 119, 119, 136, 136, 120, 105, 105, 105, 120, 135, 135, 135, 134, 135, 135, 135, 136, 120, 120, 104, 120, 136, 135, 135, 119, 120, 136, 136, 119, 119, 120, 120, 136, 135, 118, 135, 135, 135, 135, 135, 136, 120, 120, 120, 120, 120, 135, 135, 135, 135, 135, 135, 135, 119, 136, 120, 136, 120, 120, 120, 120, 135, 135, 135, 135, 135, 136, 135, 119, 120, 136, 136, 119, 120, 120, 120, 120, 120, 135, 119, 135, 135, 135, 135, 135, 135, 136, 136, 135, 119, 120, 119, 119, 135, 135, 135, 135, 135, 135, 119, 119, 120, 120, 120, 120, 119, 119, 119, 135, 136, 136, 135, 119, 119, 119, 135, 136, 136, 136, 120, 120, 120, 120, 120, 120, 120, 120, 135, 119, 135, 135, 135, 135, 135, 135, 136, 135, 119, 120, 120, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 119, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 135, 135, 136, 135, 135, 120, 119, 135, 136, 135, 135, 135, 136, 120, 119, 120, 120, 135, 136, 119, 135, 136, 119, 119, 136, 120, 119, 119, 120, 136, 135, 135, 135, 119, 135, 136, 120, 120, 120, 120, 120, 120, 120, 120, 135, 135, 135, 135, 135, 135, 120, 136, 120, 120, 120, 120, 136, 135, 135, 135, 135, 135, 135, 119, 120, 120, 136, 120, 119, 135, 135, 135, 135, 135, 120, 120, 135, 120, 120, 135, 135, 135, 135, 135, 136, 120, 135, 135, 119, 135, 135, 135, 119, 120, 136, 136, 119, 120, 120, 120, 120, 120, 135, 135, 135, 135, 135, 135, 135, 135, 135, 119, 136, 120, 120, 119, 120, 120, 119, 119, 120, 120, 135, 135, 119, 120, 136, 136, 120, 120, 119, 120, 120, 120, 120, 120, 120, 120, 120, 135, 120, 120, 120, 136, 136, 120, 120, 119, 120, 120, 120, 136, 136, 136, 119, 135, 135, 135, 119, 135, 136, 136, 119, 120, 120, 119, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 136, 135, 135, 119, 120, 136, 120, 120, 120, 135, 135, 135, 135, 135, 136, 136, 120, 120, 120, 120, 120, 120, 119, 119, 135, 135, 136, 120, 135, 120, 120, 120, 136, 120, 120, 120, 120, 120, 119, 135, 136, 119, 135, 136, 120, 119, 120, 136, 135, 119, 119
};

// thunderkick 1500
prog_uchar thunderkick[] PROGMEM = {
137, 120, 120, 120, 120, 120, 120, 135, 135, 135, 135, 135, 135, 135, 100, 189, 205, 236, 133, 82, 1, 21, 120, 137, 204, 221, 221, 204, 184, 84, 0, 0, 0, 0, 1, 89, 203, 222, 238, 219, 168, 135, 101, 87, 172, 205, 204, 219, 169, 116, 51, 68, 49, 17, 18, 36, 69, 106, 204, 187, 172, 187, 150, 119, 103, 138, 171, 221, 221, 220, 185, 151, 67, 50, 34, 34, 34, 52, 86, 137, 172, 221, 221, 187, 168, 102, 101, 85, 104, 155, 204, 204, 204, 186, 134, 84, 34, 34, 33, 18, 34, 53, 85, 121, 171, 204, 204, 186, 170, 153, 153, 153, 154, 186, 171, 203, 186, 152, 135, 83, 50, 17, 17, 17, 17, 34, 53, 102, 119, 137, 170, 187, 187, 187, 187, 188, 203, 188, 204, 204, 203, 186, 135, 84, 50, 17, 17, 17, 18, 52, 85, 103, 120, 136, 136, 153, 170, 171, 187, 204, 204, 221, 221, 204, 186, 152, 102, 84, 51, 34, 34, 35, 51, 68, 85, 86, 102, 120, 136, 154, 170, 187, 188, 204, 204, 204, 204, 186, 169, 152, 118, 101, 68, 51, 51, 35, 51, 51, 68, 69, 103, 120, 137, 154, 170, 171, 187, 204, 204, 205, 203, 187, 170, 152, 119, 101, 84, 68, 51, 34, 51, 51, 52, 69, 102, 119, 137, 153, 153, 170, 187, 187, 204, 204, 204, 203, 186, 169, 136, 118, 85, 68, 51, 51, 51, 51, 68, 85, 85, 102, 119, 120, 137, 170, 171, 187, 188, 187, 187, 187, 170, 170, 153, 136, 119, 101, 84, 68, 51, 51, 51, 68, 85, 86, 119, 119, 136, 153, 154, 170, 187, 188, 203, 187, 187, 186, 169, 152, 135, 102, 85, 84, 51, 51, 51, 68, 69, 85, 102, 103, 120, 136, 153, 154, 171, 187, 188, 204, 204, 187, 170, 153, 136, 119, 102, 85, 68, 68, 68, 68, 68, 69, 85, 86, 102, 119, 137, 153, 170, 171, 187, 187, 187, 187, 186, 169, 153, 135, 119, 102, 85, 84, 69, 68, 68, 68, 69, 85, 86, 102, 120, 136, 154, 171, 187, 187, 187, 187, 186, 170, 153, 152, 135, 119, 102, 101, 85, 85, 85, 85, 85, 85, 85, 86, 103, 120, 137, 153, 170, 171, 187, 187, 186, 170, 169, 153, 152, 136, 119, 118, 102, 85, 85, 85, 85, 85, 85, 86, 102, 103, 119, 136, 153, 170, 171, 187, 187, 186, 170, 153, 153, 136, 136, 135, 119, 102, 101, 85, 84, 68, 68, 85, 86, 103, 119, 120, 136, 153, 153, 154, 170, 186, 171, 170, 170, 153, 152, 136, 119, 118, 102, 102, 85, 85, 85, 85, 85, 86, 102, 103, 120, 136, 153, 153, 170, 170, 170, 170, 170, 169, 153, 152, 136, 135, 119, 102, 102, 101, 85, 85, 85, 85, 86, 102, 103, 119, 136, 137, 153, 153, 170, 170, 170, 170, 169, 153, 152, 136, 135, 119, 118, 102, 102, 102, 85, 85, 85, 86, 102, 103, 119, 136, 136, 153, 153, 153, 153, 153, 153, 153, 153, 153, 152, 136, 119, 118, 102, 102, 102, 102, 102, 102, 102, 102, 103, 119, 120, 136, 137, 153, 153, 153, 153, 153, 153, 153, 152, 136, 136, 136, 119, 118, 102, 102, 85, 85, 102, 102, 102, 119, 119, 120, 136, 136, 137, 153, 153, 153, 153, 153, 153, 152, 136, 136, 135, 119, 119, 102, 102, 102, 102, 102, 102, 102, 103, 119, 120, 136, 136, 136, 153, 153, 153, 153, 153, 153, 153, 152, 136, 136, 119, 119, 119, 102, 102, 102, 102, 102, 102, 103, 119, 119, 120, 136, 136, 136, 153, 153, 153, 153, 153, 153, 152, 136, 136, 135, 119, 119, 118, 102, 102, 102, 102, 102, 102, 119, 119, 119, 136, 136, 136, 153, 153, 153, 153, 153, 153, 153, 136, 136, 136, 119, 119, 119, 102, 102, 102, 102, 102, 102, 103, 119, 119, 119, 136, 136, 136, 137, 153, 153, 153, 153, 153, 152, 136, 136, 135, 119, 119, 119, 102, 102, 102, 103, 119, 119, 119, 119, 119, 119, 136, 136, 136, 153, 153, 153, 153, 152, 136, 136, 136, 136, 135, 119, 119, 119, 118, 102, 102, 102, 103, 119, 119, 119, 119, 136, 136, 136, 136, 137, 153, 153, 153, 152, 136, 136, 136, 136, 119, 119, 119, 119, 119, 102, 102, 102, 119, 119, 119, 119, 120, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 135, 119, 119, 119, 119, 119, 119
};

// tomtom1 1000
prog_uchar tomtom1[] PROGMEM = {
120, 120, 119, 119, 119, 154, 187, 204, 204, 186, 117, 53, 86, 102, 68, 88, 185, 151, 68, 85, 84, 50, 51, 87, 102, 85, 122, 189, 222, 255, 254, 236, 167, 85, 103, 118, 102, 87, 137, 152, 101, 69, 84, 51, 34, 53, 86, 102, 104, 154, 154, 170, 171, 188, 203, 170, 153, 153, 152, 136, 137, 152, 135, 101, 84, 68, 51, 51, 69, 86, 119, 119, 135, 136, 136, 137, 136, 152, 137, 154, 170, 154, 170, 170, 153, 170, 152, 152, 118, 85, 67, 52, 51, 69, 85, 119, 120, 137, 136, 136, 135, 119, 119, 135, 120, 153, 170, 171, 187, 187, 170, 153, 135, 135, 118, 102, 85, 85, 85, 85, 86, 103, 119, 119, 119, 135, 119, 119, 119, 119, 120, 137, 153, 171, 187, 187, 186, 169, 152, 136, 135, 119, 102, 102, 102, 102, 102, 119, 118, 119, 119, 119, 102, 102, 102, 102, 103, 120, 137, 153, 154, 170, 170, 170, 169, 153, 136, 136, 136, 136, 119, 119, 119, 118, 102, 102, 102, 102, 102, 102, 102, 119, 119, 119, 119, 120, 136, 153, 153, 153, 153, 153, 153, 153, 153, 153, 137, 152, 136, 136, 135, 119, 118, 102, 85, 85, 86, 102, 103, 103, 119, 120, 136, 136, 136, 136, 136, 136, 136, 136, 153, 153, 154, 170, 153, 153, 152, 136, 135, 119, 102, 102, 102, 102, 102, 102, 102, 102, 102, 119, 119, 119, 136, 135, 120, 136, 136, 136, 137, 153, 153, 153, 154, 153, 169, 152, 136, 119, 119, 119, 102, 103, 118, 102, 102, 102, 103, 119, 119, 119, 102, 119, 102, 119, 120, 136, 136, 136, 153, 153, 153, 153, 153, 153, 153, 136, 136, 119, 119, 119, 119, 119, 119, 119, 118, 102, 102, 102, 102, 102, 103, 119, 119, 119, 119, 136, 136, 136, 137, 153, 153, 153, 153, 153, 152, 136, 136, 136, 136, 136, 119, 119, 119, 118, 102, 102, 102, 102, 102, 102, 103, 119, 119, 119, 136, 136, 136, 136, 136, 136, 136, 136, 152, 137, 153, 153, 153, 152, 136, 136, 136, 119, 119, 119, 102, 102, 102, 102, 102, 103, 119, 119, 119, 119, 119, 119, 119, 119, 136, 136, 136, 136, 153, 153, 153, 153, 153, 136, 136, 136, 136, 136, 119, 119, 119, 119, 102, 102, 103, 119, 119, 119, 119, 118, 119, 119, 119, 119, 119, 120, 136, 136, 137, 153, 153, 153, 153, 152, 136, 136, 136, 136, 136, 136, 135, 119, 119, 119, 119, 118, 102, 102, 102, 102, 119, 119, 119, 119, 119, 119, 120, 136, 136, 136, 136, 136, 153, 136, 137, 152, 136, 136, 136, 136, 136, 136, 135, 119, 119, 119, 119, 102, 102, 102, 102, 119, 119, 119, 119, 119, 119, 119, 119, 136, 136, 136, 136, 136, 136, 136, 136, 153, 152, 136, 136, 136, 136, 136, 136, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 136, 136, 136, 136
};

// tomtom2 1000
prog_uchar tomtom2[] PROGMEM = {
136, 120, 120, 120, 120, 119, 120, 136, 136, 136, 119, 119, 118, 119, 119, 120, 137, 153, 135, 135, 120, 153, 186, 185, 137, 150, 84, 85, 66, 17, 0, 17, 52, 86, 120, 187, 205, 186, 204, 221, 219, 187, 203, 186, 135, 83, 67, 34, 35, 35, 71, 137, 152, 137, 187, 203, 222, 238, 236, 203, 185, 152, 121, 118, 117, 67, 34, 35, 34, 53, 103, 136, 136, 135, 136, 120, 120, 154, 154, 170, 168, 118, 84, 50, 34, 35, 69, 103, 136, 136, 119, 118, 102, 85, 85, 86, 103, 136, 136, 136, 136, 101, 85, 86, 103, 103, 136, 154, 170, 187, 186, 152, 118, 85, 101, 85, 103, 119, 136, 136, 135, 119, 119, 119, 136, 154, 171, 187, 204, 187, 186, 152, 135, 119, 68, 68, 68, 85, 102, 102, 103, 119, 102, 102, 119, 120, 154, 155, 187, 204, 186, 153, 136, 119, 85, 84, 84, 51, 52, 68, 68, 52, 68, 69, 102, 120, 137, 170, 204, 203, 203, 203, 186, 153, 153, 135, 102, 84, 67, 51, 35, 51, 68, 68, 69, 86, 103, 137, 154, 187, 221, 204, 204, 203, 187, 170, 152, 135, 118, 85, 68, 68, 67, 34, 51, 51, 52, 86, 120, 136, 154, 171, 205, 220, 204, 203, 186, 170, 169, 152, 135, 101, 68, 50, 34, 33, 35, 52, 68, 86, 119, 120, 137, 154, 171, 187, 203, 204, 204, 187, 186, 169, 152, 135, 101, 84, 67, 50, 34, 34, 51, 52, 86, 120, 137, 153, 171, 187, 204, 203, 187, 187, 170, 169, 152, 136, 119, 101, 68, 51, 51, 52, 68, 85, 85, 86, 103, 120, 136, 137, 154, 171, 171, 187, 187, 170, 170, 153, 136, 119, 118, 85, 68, 69, 68, 68, 69, 85, 102, 102, 120, 136, 136, 137, 153, 170, 170, 170, 170, 169, 153, 152, 136, 119, 102, 102, 85, 85, 85, 85, 85, 85, 86, 119, 119, 119, 136, 136, 137, 153, 153, 170, 170, 153, 153, 152, 152, 119, 119, 102, 102, 102, 101, 85, 85, 85, 102, 102, 102, 103, 120, 136, 153, 153, 153, 153, 153, 153, 153, 153, 136, 136, 135, 118, 102, 102, 85, 101, 85, 85, 85, 102, 102, 103, 119, 120, 136, 153, 153, 170, 170, 170, 170, 153, 153, 136, 135, 118, 102, 85, 85, 85, 102, 85, 85, 85, 102, 102, 103, 120, 136, 153, 153, 154, 169, 170, 169, 153, 153, 136, 135, 119, 119, 102, 102, 102, 85, 85, 85, 85, 86, 102, 119, 119, 120, 136, 153, 153, 153, 170, 169, 153, 153, 153, 136, 136, 119, 119, 102, 102, 85, 85, 85, 85, 85, 102, 102, 102, 119, 119, 120, 137, 153, 153, 154, 169, 153, 153, 153, 136, 136, 136, 119, 119, 102, 102, 101, 85, 85, 85, 85, 86, 102, 103, 119, 120, 136, 153, 153, 153, 170, 169, 153, 153, 153, 136, 136, 135, 119, 102, 102, 102, 85, 85, 85, 85, 85, 102, 102, 119
};



int wr = 2; 
int hl = 3; 
int fm = 4;
int dT = 14;

byte data; // general working byte for serially-received data
byte dataIn;
byte rstat;
byte working_byte = 0; // working byte for the SN76489 stuff

byte channel;
byte pitch; 
byte velocity;
byte ccnumber; 
byte ccvalue; 
byte bendMSB;
byte bendLSB;

int pdatInt = 0;
byte pdat1 = 0;
byte pdat2 = 0;

int delay_time = 1; // a short gap in milliseconds between write cycles
int delay_time_sn = 0;

int flag_mode = 1;

int flag_previous = 0; // keeps track of the previus MIDI byte type received 

/* flag_previous meanings: 
 -1 = note off status
 -2 = note off pitch
 0 = no action / waiting
 1 = note on status
 2 = pitch
 3 = cc status
 4 = cc number
 5 = bend status
 6 = bend lsb
 */

int pitchTable[] = 
{
  1008, 951, 898, 847, 800, 755, 713, 673, 635, 599, 566, 534, 504, 
  475, 449, 424, 400, 378, 356, 336, 317, 300, 283, 267, 252, 238, 
  224, 212, 200, 189, 178, 168, 159, 150, 141, 133, 126, 119, 112, 
  106, 100, 94, 89, 84, 79, 75, 71, 67, 63, 59, 56, 53, 50, 47, 45, 
  42, 40, 37, 35, 33, 31, 30, 28, 26, 25, 24, 22, 21, 20, 19, 18, 17, 
  16, 15, 14, 13, 13, 12, 11, 11, 10, 9, 9, 
  1017, 960, 906, 855, 807, 762, 719, 679, 641, 605, 571, 539, 508, 480, 
  453, 428, 404, 381, 360, 339, 320, 302, 285, 269, 254, 240, 226, 214, 
  202, 190, 180, 170, 160, 151, 143, 135, 127, 120, 113, 107, 101, 95, 
  90, 85, 80, 76, 71, 67, 64, 60, 57, 53, 50, 48, 45, 42, 40, 38, 36, 
  34, 32, 30, 28, 27, 25, 24, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 
  13, 12, 11, 11, 10, 9, 9
};

int bass_mode = 0;

int coarsePitch[] = 
{
  64, 64, 64, 64
};

int pitchTableOffset = 0;

// Arrays to hold running state data
byte bend_data[] = 
{
  64, 64, 64, 64
};

byte bend_MSB[] = 
{
  64, 64, 64, 64
};

byte pitchData[] = 
{
  0, 0, 0, 0
};

byte velocityData[] = 
{
  0, 0, 0, 0
};


byte noiseLookup[] = {
  B11100000, // C
  B11100000, // C#
  B11100001, // D
  B11100001, // D#
  B11100010, // E
  B11100100, // F
  B11100101, // F#
  B11100110, // G
  B11100110, // G#
  B11100011, // A
  B11100011, // A#
  B11100111, // B
};



// AM Modulation

byte amAccum[] = {
  0, 0, 0, 0
};

byte amSpeed[] = {
  10, 10, 10, 10
};

byte amModOn[] = {
  0, 0, 0, 0
};

byte amDepth[] = {
  0, 0, 0, 0
};

byte amFlip[] = {
  0, 0, 0, 0
};

// Vibrato Modulation

int vibAccum[] = {
  0, 0, 0, 0
};

byte vibSpeed[] = {
  10, 10, 10, 10
};

byte vibModOn[] = {
  0, 0, 0, 0
};

byte vibDepth[] = {
  0, 0, 0, 0
};

byte vibFlip[] = {
  0, 0, 0, 0
};








/*
 //&&&&&&&&&&&&&&&&&&&&&&\\
 ||                      ||
 ||      SETUP           || 
 ||                      ||
 \\&&&&&&&&&&&&&&&&&&&&&&//
 */


void setup() {
  Serial.begin(31250);

  DDRC = DDRC | B00111111; // set the direction for PORTC

  pinMode(wr, OUTPUT); 
  pinMode(hl, OUTPUT); 
  pinMode(fm, OUTPUT); 
  digitalWrite(fm, LOW);

  PORTC = 0;


  delay(6500);
  doCC(4, 14, 101);
  doCC(5, 14, 101);
  doCC(6, 14, 101);
  doCC(7, 14, 101);
  doCC(8, 14, 101);
  doCC(9, 14, 101);
  doCC(10, 14, 101);
  doCC(11, 14, 101);
  doCC(12, 14, 101);
  
  for(int j = 0; j < 4; j ++) {
      doNoteOn(0, (j * 7) + 45, 100);
      doNoteOn(1, (j * 7) + 52, 100);
      doNoteOn(2, (j * 7) + 59, 100);
      doNoteOn(3, (j * 7) + 40, 100);
      
      doNoteOn(4, (j * 7) + 33, 127);
      doNoteOn(5, (j * 7) + 40, 127);
      doNoteOn(6, (j * 7) + 47, 127);
      doNoteOn(7, (j * 7) + 28, 127);
      
      delay(500);
      
      doNoteOn(0, (j * 7) + 40, 0);
      doNoteOn(1, (j * 7) + 47, 0);
      doNoteOn(2, (j * 7) + 50, 0);
      doNoteOn(3, (j * 7) + 40, 0);
      
      doNoteOn(4, (j * 7) + 33, 0);
      doNoteOn(5, (j * 7) + 40, 0);
      doNoteOn(6, (j * 7) + 47, 0);
      doNoteOn(7, (j * 7) + 28, 0);
      
      
  }

}


// Main Loop
void loop() {
  doAM();
  doVib();
  doSample();



// Dealing with initial serial data

  if(Serial.available() > 0) {
    dataIn = Serial.read();
    if(dataIn < 0x80 && flag_previous == 0) {
      doMidiIn(rstat);
    }
    doMidiIn(dataIn);
  }
}




// Dealing with MIDI data

void doNoteOn(byte channel, byte pitch, byte velocity) {
  
  
// YM2413 NOTE ON EVENTS
  
  if((channel == 13) && ((shadow[0x0e] & B00100000) == 0x20)) {   
   doDrums(pitch % 12, velocity); 
  }

  else if(channel >= 4 && channel <= 12) {
    channel = channel - 4;
    
    if(velocity > 0) {
      
    // write the pitch and volume
    fm_pitch = pitch + fm_offset; 
    fm_pitches[channel] = fm_pitch;
    fm_block = (byte(fm_pitch + fm_bend[channel]) / byte(fm_octave_div)) % 8;
    
    fm_pitch = ((note_A * pow(2, ((fm_pitch - 69 + fm_bend[channel]) / fm_octave_div) )) * (pow(2, 18) / 50000)) / pow(2, fm_block - 1);
    fm_pitch1 = int(fm_pitch) % 256;
    fm_pitch2 = int(fm_pitch) / 256;
    
    shadow[0x20 + channel] = (shadow[0x20 + channel] & B11100000) | ((fm_block << 1) + fm_pitch2 + B00010000);
    shadow[0x30 + channel] = (shadow[0x30 + channel] & B11110000) | (15 - (velocity >> 3));
    
    writeYM2413(0x10 + channel, fm_pitch1);
    writeYM2413(0x20 + channel, shadow[0x20 + channel]);
    writeYM2413(0x30 + channel, shadow[0x30 + channel]);
    }
    
    else {
      shadow[0x30 + channel] = (shadow[0x30 + channel] & B11110000) | B00001111;
      shadow[0x20 + channel] = shadow[0x20 + channel] & B11101111;
      writeYM2413(0x30 + channel, shadow[0x30 + channel]);
      writeYM2413(0x20 + channel, shadow[0x20 + channel]);
    }
  }
  
  
  
  // SN76489 SAMPLE PLAYBACK ON CHANNEL 2
  else if(channel == 1 && sample_on == 1) {
    SPB_sound = pitch % 24;
    if(velocity > 0) {
      SPB_flag = 1;
      SPB_counter = 0;
      SPB_max = sample_length_list[SPB_sound];
    }

    else {
      SPB_flag = 0;
    }
  }
  
  
  
  // SN76489 BASS MODE
  else if(channel == 2 && bass_mode == 1) {
    if(sample_on == 1) 
    {
      velocity = velocity / 3;
    }
    
    
    writeSN76489(B11100011); // clock by frequency
    if(velocity > 0) {
      int coarsePitchVal = -12 + (coarsePitch[channel] / 5); 
      pitchData[channel] = pitch;
      velocityData[channel + 1] = velocity;
      writeFrequency(pitch, channel);
      writeAmplitude(velocity, channel + 1);
    }

    else {
      velocityData[channel + 1] = 0;
      writeAmplitude(0, channel + 1);
    }
  }
  
  
  

  // NORMAL PULSE CHANNELS
  else if(channel >= 0 && channel <= 2 && pitch >= 45) {
    
    if(sample_on == 1) 
    {
      velocity = velocity / 3;
    }
    
    if(velocity > 0) {
      int coarsePitchVal = -12 + (coarsePitch[channel] / 5); 
      pitchData[channel] = pitch;
      velocityData[channel] = velocity;
      writeFrequency(pitch, channel);
      writeAmplitude(velocity, channel);
    }

    else {
      velocityData[channel] = 0;
      writeAmplitude(0, channel);
    }
  }

  // NOISE
  else if(channel == 3) {
        if(sample_on == 1) 
    {
      velocity = velocity / 3;
    }
    
    if(velocity > 0) {
      velocityData[channel] = velocity;
      writeSN76489(noiseLookup[pitch % 12]);
      writeAmplitude(velocity, channel);
    }

    else {
      velocityData[channel] = 0;
      writeAmplitude(0, channel);
    }
  }   
}


void doNoteOff(byte channel, byte pitch, byte velocity) {
  
  
    if((channel == 13) && ((shadow[0x0e] & B00100000) == 0x20)) {   
       doDrums(pitch % 12, 0); 
    }
    
    else if(channel >= 4 && channel <= 12) {
      channel = channel - 4;
      shadow[0x30 + channel] = (shadow[0x30 + channel] & B11110000) | B00001111;
      shadow[0x20 + channel] = shadow[0x20 + channel] & B11101111;
      writeYM2413(0x30 + channel, shadow[0x30 + channel]);
      writeYM2413(0x20 + channel, shadow[0x20 + channel]);
  }
  
  else if(channel == 1 && sample_on == 1) {
    SPB_flag = 0;
  }

  else if(channel == 2 && bass_mode == 1) {
    writeAmplitude(0, channel + 1);
  }

  else {
    velocityData[channel] = 0;
    writeAmplitude(0, channel);
  }
}



void doCC(byte channel, byte ccnumber, byte ccvalue) {
  // SN76489 MIDI CC
  if(channel >=0 && channel <=3) {
  // CC83 = tuning mode
  if(ccnumber == 83 && channel == 0) {
    if(ccvalue > 63) {
      pitchTableOffset = 83;
    }
    else{
      pitchTableOffset = 0;
    }
  }

  // MIDI CC 42 = coarse tuning
  else if(ccnumber == 42 && channel >= 0 && channel <= 3) {
    coarsePitch[channel] = ccvalue; 
    writeFrequency(pitchData[channel], channel);
  }



  // MIDI CC 70 = AM On
  else if(ccnumber == 70 && channel >= 0 && channel <= 3) {
    amModOn[channel] = ccvalue >> 6; 
  }

  // MIDI CC 18 = AM Speed
  else if(ccnumber == 18 && channel >= 0 && channel <= 3) {
    amSpeed[channel] = ccvalue; 
  }

  // MIDI CC 19 = AM Depth
  else if(ccnumber == 19 && channel >= 0 && channel <= 3) {
    amDepth[channel] = ccvalue; 
  }

  // MIDI CC 71 = Vib On
  else if(ccnumber == 71 && channel >= 0 && channel <= 2) {
    vibModOn[channel] = ccvalue >> 6; 
  }

  // MIDI CC 20 = Vib Speed
  else if(ccnumber == 20 && channel >= 0 && channel <= 2) {
    vibSpeed[channel] = ccvalue; 
  }

  // MIDI CC 21 = Vib Depth
  else if(ccnumber == 21 && channel >= 0 && channel <= 2) {
    vibDepth[channel] = ccvalue; 
  }

  // MIDI CC 11 = expression
  else if(ccnumber == 11 && channel >= 0 && channel <= 3) {
    velocityData[channel] = ccvalue;
    writeAmplitude(ccvalue, channel);
  }

  // MIDI CC 78 = sample mode on
  else if(ccnumber == 78) {
    if(ccvalue > 63) {
      writeSN76489(B10100000);
      writeSN76489(B00000000);
    }
    sample_on = ccvalue >> 6;

  }
  
    // MIDI CC 86 = sample playback speed
  else if(ccnumber == 86) {
    SPB_speed = ccvalue;
  }
  
      // MIDI CC 85 = bass mode
  else if(ccnumber == 85) {
    bass_mode = ccvalue >> 6;
  }
  
  }
   // YM2413 MIDI CC
    else if(channel >=4 && channel <=14) {
      channel = channel - 4;
      
      switch(ccnumber) {
        case 14: // set instrument
        shadow[0x30 + channel] = (shadow[0x30 + channel] & B00001111) | ((ccvalue >> 3) << 4);
        writeYM2413(0x30 + channel, shadow[0x30 + channel]);
        break;
        
        // register $00 - $01
        
        case 15: // AM on (mod)
        shadow[0x00] = (shadow[0x00] & B01111111) | ((ccvalue >> 6) << 7);
        writeYM2413(0x00, shadow[0x00]);
        break;
        
        case 16: // AM on (carrier)
        shadow[0x01] = (shadow[0x01] & B01111111) | ((ccvalue >> 6) << 7);
        writeYM2413(0x01, shadow[0x01]);
        break;
        
        case 17: // vib on (m)
        shadow[0x00] = (shadow[0x00] & B10111111) | ((ccvalue >> 6) << 6);
        writeYM2413(0x00, shadow[0x00]);
        break;
        
        case 18: // vib on (c)
        shadow[0x01] = (shadow[0x01] & B10111111) | ((ccvalue >> 6) << 6);
        writeYM2413(0x01, shadow[0x01]);
        break;
        
        case 19: // EG type (m)
        shadow[0x00] = (shadow[0x00] & B11011111) | ((ccvalue >> 6) << 5);
        writeYM2413(0x00, shadow[0x00]);
        break;
        
        case 20: // EG type (c)
        shadow[0x01] = (shadow[0x01] & B11011111) | ((ccvalue >> 6) << 5);
        writeYM2413(0x01, shadow[0x01]);
        break;
        
        case 21: // KSR on (m)
        shadow[0x00] = (shadow[0x00] & B11101111) | ((ccvalue >> 6) << 4);
        writeYM2413(0x00, shadow[0x00]);
        break;
        
        case 22: // KSR on (c)
        shadow[0x01] = (shadow[0x01] & B11101111) | ((ccvalue >> 6) << 4);
        writeYM2413(0x01, shadow[0x01]);
        break;
        
        case 23: // mul (m)
        shadow[0x00] = (shadow[0x00] & B11110000) | (ccvalue >> 3);
        writeYM2413(0x00, shadow[0x00]);
        break;
        
        case 24: // mul (c)
        shadow[0x01] = (shadow[0x01] & B11110000) | (ccvalue >> 3);
        writeYM2413(0x01, shadow[0x01]);
        break;
        
        // register $02 - $03
        
        case 25: // ksl (m)
        shadow[0x02] = (shadow[0x02] & B00111111) | ((ccvalue >> 5) << 6);
        writeYM2413(0x02, shadow[0x02]);
        break;
        
        case 26: // ksl (c)
        shadow[0x03] = (shadow[0x03] & B00111111) | ((ccvalue >> 5) << 6);
        writeYM2413(0x03, shadow[0x03]);
        break;
        
        case 27: // TL modulation
        shadow[0x02] = (shadow[0x02] & B11000000) | (ccvalue >> 1);
        writeYM2413(0x02, shadow[0x02]);
        break;
        
        case 28: // rect (m)
        shadow[0x03] = (shadow[0x03] & B11110111) | ((ccvalue >> 6) << 3);
        writeYM2413(0x03, shadow[0x03]);
        break;
        
        case 29: // rect (c)
        shadow[0x03] = (shadow[0x03] & B11101111) | ((ccvalue >> 6) << 4);
        writeYM2413(0x03, shadow[0x03]);
        break;
        
        case 30: // FM feedback (m)
        shadow[0x03] = (shadow[0x03] & B11111000) | (ccvalue >> 4);
        writeYM2413(0x03, shadow[0x03]);
        break;
        
        case 31: // attack (m)
        shadow[0x04] = (shadow[0x04] & B00001111) | ((ccvalue >> 3) << 4);
        writeYM2413(0x04, shadow[0x04]);
        break;
        
        case 32: // decay (m)
        shadow[0x04] = (shadow[0x04] & B11110000) | (ccvalue >> 3);
        writeYM2413(0x04, shadow[0x04]);
        break;
        
        case 33: // sustain (m)
        shadow[0x06] = (shadow[0x06] & B00001111) | ((ccvalue >> 3) << 4);
        writeYM2413(0x06, shadow[0x06]);
        break;
        
        case 34: // release (m)
        shadow[0x06] = (shadow[0x06] & B11110000) | (ccvalue >> 3);
        writeYM2413(0x06, shadow[0x06]);
        break;
        
        case 35: // attack (c)
        shadow[0x05] = (shadow[0x05] & B00001111) | ((ccvalue >> 3) << 4);
        writeYM2413(0x05, shadow[0x05]);
        break;
        
        case 36: // decay (c)
        shadow[0x05] = (shadow[0x05] & B11110000) | (ccvalue >> 3);
        writeYM2413(0x05, shadow[0x05]);
        break;
        
        case 37: // sustain (c)
        shadow[0x07] = (shadow[0x07] & B00001111) | ((ccvalue >> 3) << 4);
        writeYM2413(0x07, shadow[0x07]);
        break;
        
        case 38: // release (c)
        shadow[0x07] = (shadow[0x07] & B11110000) | (ccvalue >> 3);
        writeYM2413(0x07, shadow[0x07]);
        break;
        
        
        
        case 70: // sustain mode enabled
        shadow[0x20 + channel] = (shadow[0x20 + channel] & B11011111) | ((ccvalue >> 6) << 5);     
        writeYM2413(0x20 + channel, shadow[0x20 + channel]);
        break;
        
        case 78: // percussion mode enabled
        shadow[0x0e] = (shadow[0x0e] & B11011111) | ((ccvalue >> 6) << 5);
        
        writeYM2413(0x16, 0x20);
        writeYM2413(0x17, 0x50);
        writeYM2413(0x18, 0xc0);
        writeYM2413(0x26, 0x05);
        writeYM2413(0x27, 0x05);
        writeYM2413(0x28, 0x01);
        
        writeYM2413(0x0e, shadow[0x0e]);
        
        break;
        
        case 79: // set pitch bend resolution
        fm_bend_res = ccvalue / (127 / 12);
        break; 
        
        case 80: // set octave division resolution
        fm_octave_div = ccvalue;
        break;
        
        case 81: // set the value of A in Hz
        note_A = 381 + ccvalue; 
        break; 
        
        
      }

}

}



void doBend(byte channel, byte bendLSB, double bendMSB) {

  if(channel >=0 && channel <= 2) {
    bend_MSB[channel] = bendMSB;
    bend_data[channel] = bend_MSB[channel];
    writeFrequency(pitchData[channel], channel);
  }
  
    else if(channel >= 4 && channel <= 12) {
    channel = channel - 4;
    
    fm_bend[channel] = (bendMSB - 63) / (127 / (fm_bend_res * 2));
    fm_pitch = fm_pitches[channel];
    fm_block = (byte(fm_pitch) / byte(fm_octave_div)) % 8;
    
    
    // write the pitch
    fm_pitch = ((note_A * pow(2, ((fm_pitch - 69 + fm_bend[channel]) / fm_octave_div) )) * (pow(2, 18) / 50000)) / pow(2, fm_block - 1);
    fm_pitch1 = int(fm_pitch) % 256;
    fm_pitch2 = int(fm_pitch) / 256;
    
    shadow[0x20 + channel] = (shadow[0x20 + channel] & B11100000) | ((fm_block << 1) + fm_pitch2 + B00010000);
    
    writeYM2413(0x10 + channel, fm_pitch1);
    writeYM2413(0x20 + channel, shadow[0x20 + channel]);
    }
}






////////////////////////////////////////////////////////
//
//    DEALING WITH THE SN76489
//
////////////////////////////////////////////////////////

void writeSN76489(byte data) {
  
  PORTC = data & 0x0f;
  digitalWrite(hl, LOW); 
  digitalWrite(wr, HIGH); 
  delayMicroseconds(dT);
  digitalWrite(wr, LOW); 
  delayMicroseconds(dT);

  PORTC = (data >> 4) & 0x0f; 
  digitalWrite(hl, HIGH); 
  digitalWrite(wr, HIGH); 
  delayMicroseconds(dT);
  digitalWrite(wr, LOW); 
  delayMicroseconds(dT);    
}




////////////////////////////////////////////////////////
//
//    DEALING WITH THE Y2413
//
////////////////////////////////////////////////////////

void writeYM2413(byte address, byte data2) {
  digitalWrite(fm, HIGH); // latch FM active pin...
  
    out_data = address | B10000000; 
    writeSN76489(out_data);    
    delayMicroseconds(50);
  
  
  out_data = data2 & B00001111;
  writeSN76489(out_data);
    delayMicroseconds(50);
    
    
  out_data = B01000000 | ((data2 >> 4) & B00001111);
  writeSN76489(out_data);
  
  delayMicroseconds(50);
  digitalWrite(fm, LOW); // unlatch FM active pin...  
}




void writeAmplitude(byte velocity, byte channel) {
  // latch byte
  channel = channel << 5;
  velocity = 15 - (velocity >> 3);
  working_byte = B10010000 + channel + velocity;
  writeSN76489(working_byte);
}

void writeFrequency(byte pitch, byte channel) {
  // latch byte
  int pdaInt;
  int coarsePitchVal = -12 + (coarsePitch[channel] / 5); 
  pdatInt = (pitchTable[pitch - 45 + pitchTableOffset + coarsePitchVal]) + (64 - bend_data[channel]);
  if(pdatInt < 0) {
    pdatInt = 0;
  }
  else if(pdatInt > 1023) {
    pdatInt = 1023;
  }
  pdat1 = pdatInt % 16;
  channel = channel << 5;
  working_byte = B10000000 + channel + pdat1;
  writeSN76489(working_byte);

  // data byte
  pdat2 = (pdatInt >> 4) & B00111111;
  writeSN76489(pdat2);
}


void doVib() {
  for(int i = 0; i < 3; i ++) {
    if(velocityData[i] > 0 && vibModOn[i] == 1) {

      if(vibAccum[i] < vibSpeed[i] * 10) {
        vibAccum[i] = vibAccum[i] + 1;
      }

      else if(vibAccum[i] > vibSpeed[i] * 10) {
        vibAccum[i] = 0;
      }

      if(vibFlip[i] == 0 && vibAccum[i] == (vibSpeed[i] * 10)) {
        bend_data[i] = bend_MSB[i];
        writeFrequency(pitchData[i], channel);
        vibFlip[i] = 1;
        vibAccum[i] = 0;
      }

      else if(vibFlip[i] == 1 && vibAccum[i] == (vibSpeed[i] * 10)) {
        bend_data[i] = bend_MSB[i] + vibDepth[i];
        writeFrequency(pitchData[i], channel);
        vibFlip[i] = 0;
        vibAccum[i] = 0;
      }
    }
  }
}


void doAM() {

  for(int i = 0; i < 4; i ++) {
    if(velocityData[i] > 0 && amModOn[i] == 1) {

      if(amAccum[i] < amSpeed[i]) {
        amAccum[i] = amAccum[i] + 1;
      }

      else if(amAccum[i] > amSpeed[i]) {
        amAccum[i] = 0;
      }

      if(amFlip[i] == 0 && amAccum[i] == amSpeed[i]) {
        writeAmplitude(amDepth[i], i);
        amFlip[i] = 1;
        amAccum[i] = 0;
      }

      else if(amFlip[i] == 1 && amAccum[i] == amSpeed[i]) {
        writeAmplitude(velocityData[i], i);
        amFlip[i] = 0;
        amAccum[i] = 0;
      }
    }
  }
}





// SAMPLES
void doSample() {
  if(SPB_flag == 1 && sample_on == 1) {


    if(SPB_counter >= SPB_max) {
      SPB_flag = 0;
      SPB_counter = 0;
    }


    if(SPB_tick >= SPB_speed) {
      SPB_tick = 0;
      switch (SPB_sound) {
      case 0:
        writeSN76489(B10110000 | ((pgm_read_byte_near(kick1 + (SPB_counter / 2)) >> ((SPB_counter % 2) * 4)) & B00001111));
        break;      

      case 1:
        writeSN76489(B10110000 | ((pgm_read_byte_near(snare1 + (SPB_counter / 2)) >> ((SPB_counter % 2) * 4)) & B00001111));
        break; 

      case 2:
        writeSN76489(B10110000 | ((pgm_read_byte_near(hatc1 + (SPB_counter / 2)) >> ((SPB_counter % 2) * 4)) & B00001111));
        break; 

      case 3:
        writeSN76489(B10110000 | ((pgm_read_byte_near(hato1 + (SPB_counter / 2)) >> ((SPB_counter % 2) * 4)) & B00001111));
        break; 

      case 4:
        writeSN76489(B10110000 | ((pgm_read_byte_near(tom1 + (SPB_counter / 2)) >> ((SPB_counter % 2) * 4)) & B00001111));
        break; 

      case 5:
        writeSN76489(B10110000 | ((pgm_read_byte_near(ride1 + (SPB_counter / 2)) >> ((SPB_counter % 2) * 4)) & B00001111));
        break; 

      case 6:
        writeSN76489(B10110000 | ((pgm_read_byte_near(bongo1 + (SPB_counter / 2)) >> ((SPB_counter % 2) * 4)) & B00001111));
        break; 

      case 7:
        writeSN76489(B10110000 | ((pgm_read_byte_near(bongo2 + (SPB_counter / 2)) >> ((SPB_counter % 2) * 4)) & B00001111));
        break; 

      case 8:
        writeSN76489(B10110000 | ((pgm_read_byte_near(conga + (SPB_counter / 2)) >> ((SPB_counter % 2) * 4)) & B00001111));
        break; 

      case 9:
        writeSN76489(B10110000 | ((pgm_read_byte_near(crash1 + (SPB_counter / 2)) >> ((SPB_counter % 2) * 4)) & B00001111));
        break; 

      case 10:
        writeSN76489(B10110000 | ((pgm_read_byte_near(crash2 + (SPB_counter / 2)) >> ((SPB_counter % 2) * 4)) & B00001111));
        break; 

      case 11:
        writeSN76489(B10110000 | ((pgm_read_byte_near(dnbkick + (SPB_counter / 2)) >> ((SPB_counter % 2) * 4)) & B00001111));
        break; 

      case 12:
        writeSN76489(B10110000 | ((pgm_read_byte_near(djscratch + (SPB_counter / 2)) >> ((SPB_counter % 2) * 4)) & B00001111));
        break; 

      case 13:
        writeSN76489(B10110000 | ((pgm_read_byte_near(kick2 + (SPB_counter / 2)) >> ((SPB_counter % 2) * 4)) & B00001111));
        break; 

      case 14:
        writeSN76489(B10110000 | ((pgm_read_byte_near(kick3 + (SPB_counter / 2)) >> ((SPB_counter % 2) * 4)) & B00001111));
        break; 

      case 15:
        writeSN76489(B10110000 | ((pgm_read_byte_near(snare2 + (SPB_counter / 2)) >> ((SPB_counter % 2) * 4)) & B00001111));
        break; 

      case 16:
        writeSN76489(B10110000 | ((pgm_read_byte_near(tambourine + (SPB_counter / 2)) >> ((SPB_counter % 2) * 4)) & B00001111));
        break; 

      case 17:
        writeSN76489(B10110000 | ((pgm_read_byte_near(thunderkick + (SPB_counter / 2)) >> ((SPB_counter % 2) * 4)) & B00001111));
        break; 

      case 18:
        writeSN76489(B10110000 | ((pgm_read_byte_near(tomtom1 + (SPB_counter / 2)) >> ((SPB_counter % 2) * 4)) & B00001111));
        break; 

      case 19:
        writeSN76489(B10110000 | ((pgm_read_byte_near(tomtom2 + (SPB_counter / 2)) >> ((SPB_counter % 2) * 4)) & B00001111));
        break; 

      case 20:
        writeSN76489(B10110000 | ((pgm_read_byte_near(kick1 + (SPB_counter / 2)) >> ((SPB_counter % 2) * 4)) & B00001111));
        break; 

      case 21:
        writeSN76489(B10110000 | ((pgm_read_byte_near(kick1 + (SPB_counter / 2)) >> ((SPB_counter % 2) * 4)) & B00001111));
        break; 

      case 22:
        writeSN76489(B10110000 | ((pgm_read_byte_near(kick1 + (SPB_counter / 2)) >> ((SPB_counter % 2) * 4)) & B00001111));
        break; 
      
      case 23:
        writeSN76489(B10110000 | ((pgm_read_byte_near(kick1 + (SPB_counter / 2)) >> ((SPB_counter % 2) * 4)) & B00001111));
        break; 


      }


      SPB_counter = SPB_counter + 1;
      SPB_tick = 0; 
    }

    if(SPB_tick < SPB_speed) {
      SPB_tick = SPB_tick + 1;
    }

  }

}


void doMidiIn(byte data) {
  // running status set

  if((data >= 0x80) && (data < 0xf0) && (flag_previous == 0)) {
    rstat = data;
  }


  // deal with note on
  if((data >= 0x90) && (data < 0xa0) && (flag_previous == 0)) {
    channel = data & B00001111;
    flag_previous = 1;
  }
  else if((data < 0x80) && (flag_previous == 1)) {
    pitch = data;
    flag_previous = 2;
  }
  else if((data < 0x80) && (flag_previous == 2)) {
    velocity = data;
    doNoteOn(channel, pitch, velocity);
    flag_previous = 0;
  }
  // done with note on

  // deal with note off (as discrete status byte)
  else if((data >= 0x80) && (data < 0x90) && (flag_previous == 0)) {
    channel = data & B00001111;
    flag_previous = -1;
  }
  else if((data < 0x80) && (flag_previous == -1)) {
    pitch = data;
    flag_previous = -2;
  }
  else if((data < 0x80) && (flag_previous == -2)) {
    velocity = data;
    doNoteOff(channel, pitch, velocity);
    flag_previous = 0;
  }
  // done with note off (as discrete status byte)

  // deal with cc data
  else if((data >= 0xb0) && (data < 0xc0) && (flag_previous == 0)) {
    channel = data & B00001111;
    flag_previous = 3;
  }
  else if((data < 0x80) && (flag_previous == 3)) {
    ccnumber = data;
    flag_previous = 4;
  }
  else if((data < 0x80) && (flag_previous == 4)) {
    ccvalue = data;
    doCC(channel, ccnumber, ccvalue);
    flag_previous = 0;
  }
  // done with cc data

  // deal with bend data
  else if((data >= 0xe0) && (data < 0xf0) && (flag_previous == 0)) {
    channel = data & B00001111;
    flag_previous = 5;
  }
  else if((data < 0x80) && (flag_previous == 5)) {
    bendLSB = data;
    flag_previous = 6;
  }
  else if((data < 0x80) && (flag_previous == 6)) {
    bendMSB = data;
    doBend(channel, bendLSB, bendMSB);
    flag_previous = 0;
  }
  // done with bend data

}

void doDrums(byte case1, byte velo1) {
  

        if(velo1 > 0) {
          drum_key = 1;
        }
        
        else {
          drum_key = 0;
        }
        
        switch(case1) {
        case 0: // bd
        shadow[0x0e] = (shadow[0x0e] & B11101111) | (drum_key << 4);
        shadow[0x36] = (shadow[0x36] & B11110000) | (15 - (velo1 >> 3));
        
        writeYM2413(0x36, shadow[0x36]);
        writeYM2413(0x0e, shadow[0x0e]);
        
        break;
        
        
        case 2: // sd
        shadow[0x0e] = (shadow[0x0e] & B11110111) | (drum_key << 3);
        shadow[0x37] = (shadow[0x37] & B11110000) | (15 - (velo1 >> 3));
        
        writeYM2413(0x37, shadow[0x37]);
        writeYM2413(0x0e, shadow[0x0e]);
        
        break;
        
        
        case 4: // tom
        shadow[0x0e] = (shadow[0x0e] & B11111011) | (drum_key << 2);
        shadow[0x38] = (shadow[0x38] & B00001111) | ((15 - (velo1 >> 3)) << 4);
        
        writeYM2413(0x38, shadow[0x38]);
        writeYM2413(0x0e, shadow[0x0e]);
        
        break;
        
        case 5: // top-cy
        shadow[0x0e] = (shadow[0x0e] & B11111101) | (drum_key << 1);
        shadow[0x38] = (shadow[0x38] & B11110000) | (15 - (velo1 >> 3));
        
        writeYM2413(0x38, shadow[0x38]);
        writeYM2413(0x0e, shadow[0x0e]);
        
        break;
        
        case 7: // hh
        shadow[0x0e] = (shadow[0x0e] & B11111110) | drum_key;
        shadow[0x37] = (shadow[0x37] & B00001111) | ((15 - (velo1 >> 3)) << 4);
        
        writeYM2413(0x37, shadow[0x37]);
        writeYM2413(0x0e, shadow[0x0e]);
        
        break;
      }
}

